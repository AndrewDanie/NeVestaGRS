Index: test/functions/PhysicFunctions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from core.model.functions.PhysicFunctions import *\r\n\r\n\"\"\"\r\nвходные данные для тестов\r\n\"\"\"\r\ncomposition = {'Methane': 0.9197, 'Ethane': 0.0446, 'Propane': 0.0192, 'Isobutane': 0.0052, 'Butane': 0.0043,\r\n               'Isopentane': 0.0013, 'Pentane': 0.0007, 'Hexane': 0.0007, 'Oxygen': 0.0020, 'Nitrogen': 0.002,\r\n               'CarbonDioxide': 0.0002}\r\ntemperature = 0\r\npressure = 5\r\nrate = 50000\r\ndiameter = 219\r\nwall = 10\r\nvolume = 10\r\nkv = 100\r\ninlet_pressure = 5.4\r\noutlet_pressures = 0.6, 5.3\r\nEPS = 10**(-4)\r\ngas = Gas(composition, fluid_pack='PR')\r\n\r\n\r\ndef test_calc_pipe_velocity():\r\n\r\n    expected_answer = 6.827795950079494\r\n    answer = calc_pipe_velocity(composition=composition, temperature=temperature,\r\n                                pressure=pressure, rate=rate, diameter=diameter, wall=wall)\r\n    assert abs(answer['pipe_velocity'] - expected_answer) < EPS\r\n\r\n\r\ndef test_calc_gas_density():\r\n    expected_answer_normal_density = gas.get_normal_density()\r\n    expected_answer_standard_density =gas.get_standard_density()\r\n\r\n    answer = calc_gas_density(composition=composition)\r\n    assert abs(answer['normal_density'] - expected_answer_normal_density) < EPS\r\n    assert abs(answer['standard_density'] - expected_answer_standard_density) < EPS\r\n    return\r\n\r\n\r\ndef test_calc_pipe_diameter():\r\n    answer = calc_pipe_diameter(composition, temperature, pressure, rate)\r\n    expected_answer = 103.99760524533208\r\n    assert abs(answer['minimal_diameter'] - expected_answer) < EPS\r\n\r\n\r\ndef test_odorant_reserve_calc():\r\n    expected_answer = 367.4479166666667\r\n    answer = odorant_reserve_calc(rate, volume)\r\n    assert abs(answer['odorant_reserve'] - expected_answer) < EPS\r\n\r\n\r\ndef test_odorant_reserve_verdict():\r\n    expected_answer = True\r\n    answer = odorant_reserve_verdict(rate, volume)\r\n    assert answer == expected_answer\r\n\r\n\r\ndef test_odorant_volume_request() -> dict[str, float]:\r\n    expected_answer = 1.63288447907\r\n    answer = odorant_volume_request(rate)\r\n    assert abs(answer['odorant_request'] - expected_answer) < EPS\r\n\r\n\r\ndef test_valve_capacity_calc():\r\n    expected_answers = [108084.50504532954, 28824.122093677506]\r\n    answers = [valve_capacity_calc(composition, kv, inlet_pressure, outlet_pressure, temperature, fluid_pack='PR')['valve_rate']\r\n              for outlet_pressure in outlet_pressures]\r\n    for i in range(len(answers)):\r\n        assert abs(answers[i] - expected_answers[i]) < EPS\r\n\r\n\r\ndef test_valve_kv_calc():\r\n    expected_answers = [46.26009989038716, 173.46582087565946]\r\n    answers = [valve_kv_calc(composition, rate, inlet_pressure, outlet_pressure, temperature)['kv']\r\n          for outlet_pressure in outlet_pressures]\r\n    for i in range(len(answers)):\r\n        assert abs(answers[i] - expected_answers[i]) < EPS\r\n\r\n\r\n#test_calc_pipe_velocity()\r\n\r\n\r\ntest_functions = {'функции расчёта скоростей в трубопроводе': test_calc_pipe_velocity,\r\n                  'функции расчёта плотности смеси при ст.у. и н.у.': test_calc_gas_density,\r\n                  'функции расчёта минимального диаметра трубопровода': test_calc_pipe_diameter,\r\n                  'функции расчёта запаса одоранта': test_odorant_reserve_calc,\r\n                  'функции определения достаточности ёмкости одоранта': test_odorant_reserve_verdict,\r\n                  'функции расчёта минимального объёма ёмкости одоранта': test_odorant_volume_request,\r\n                  'функции расчёта пропускной способности регулятора': test_valve_capacity_calc,\r\n                  'функции расчёта требуемой пропускной способности регулятора': test_valve_kv_calc}\r\n\r\n\r\nfor function_name, function in test_functions.items():\r\n    try:\r\n        function()\r\n    except AssertionError:\r\n        print(f'Ошибка в тесте {function_name}!!!')\r\n        break
===================================================================
diff --git a/test/functions/PhysicFunctions.py b/test/functions/PhysicFunctions.py
--- a/test/functions/PhysicFunctions.py	(revision e9af9fe045a8ff5af5087443280f0a686cf7abf8)
+++ b/test/functions/PhysicFunctions.py	(date 1724158453370)
@@ -55,7 +55,7 @@
     assert answer == expected_answer
 
 
-def test_odorant_volume_request() -> dict[str, float]:
+def test_odorant_volume_request():
     expected_answer = 1.63288447907
     answer = odorant_volume_request(rate)
     assert abs(answer['odorant_request'] - expected_answer) < EPS
