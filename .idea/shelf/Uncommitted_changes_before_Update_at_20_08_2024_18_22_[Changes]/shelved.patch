Index: core/grs_stat.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport sqlite3\r\nimport openpyxl as oxl\r\nimport matplotlib.pyplot as plt\r\nfrom tkinter import *\r\nfrom tkinter import scrolledtext\r\nfrom tkinter.ttk import Combobox\r\nimport random\r\n\r\nfrom core.model.entity.Gas import Gas\r\n\r\ndesign_pressure = 5.39\r\nstart_pressure = 1.5\r\npressure_steps = 100\r\npressure_step = (design_pressure - start_pressure) / pressure_steps\r\nstart_temperature = 2\r\nend_temperature = 13\r\ntemperature_step = 1\r\n\r\n\r\ncomponent_list = ['Methane', 'Ethane', 'Propane', 'Isobutane', 'Butane',\r\n                  'Isopentane', 'Pentane', 'Hexane', 'Oxygen',\r\n                  'Nitrogen', 'CarbonDioxide']\r\ncomponent_list_for_query = ['methane', 'ethane', 'propane', 'isobutane', 'butane',\r\n                            'isopentane', 'pentane', 'hexane', 'oxygen',\r\n                            'nitrogen', 'carbon_dioxide']\r\n\r\n\r\ndef get_grs_name():\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    cur.execute(\"\"\"SELECT DISTINCT name_grs FROM grs\"\"\")\r\n    grs_list = [grs[0] for grs in cur.fetchall()]\r\n    connection.close()\r\n    return grs_list\r\n\r\n\r\ndef get_composition(name_grs, normolize=True):\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    component_list_query = ', '.join(component for component in component_list_for_query)\r\n    cur.execute(f\"\"\"SELECT {component_list_query} FROM composition\r\n                    WHERE grs_id = (SELECT grs_id FROM grs \r\n                    WHERE name_grs = '{name_grs}');\"\"\")\r\n    values = cur.fetchone()\r\n    if normolize == True:\r\n        while abs(sum(values) - 1) > 10e-10:\r\n            values = [component + ((1 - sum(values)) * component) for component in values]\r\n    composition = dict(zip(component_list, values))\r\n    connection.close()\r\n    return composition\r\n\r\n\r\ndatabase_path = r'C:\\Users\\Идель\\PycharmProjects\\pythonProject2\\grs_database.db'\r\n\r\nmonths = ('01', '02', '03', '04',\r\n          '05', '06', '07', '08',\r\n          '09', '10', '11', '12')\r\nseasons = {'Весь период': -1, 'Зима': 0, 'Весна': 1, 'Лето': 2, 'Осень': 3}\r\n\r\n\r\ndef drop_table(database_path):\r\n    connection = sqlite3.connect(database_path)\r\n    cur = connection.cursor()\r\n    cur.execute(f\"\"\"DROP TABLE grs_stat\"\"\")\r\n    connection.commit()\r\n    connection.close()\r\n\r\n\r\ndef record_data():\r\n    def export_to_sqlite():\r\n\r\n        database_path = db_path_entry.get()\r\n        if database_path == '':\r\n            database_path = r'C:\\Users\\Идель\\PycharmProjects\\pythonProject2\\grs_database.db'\r\n            message = 'Прописан стандартный путь к базе данных\\n'\r\n        grs_name = grs_cmb.get()\r\n        if grs_name == '':\r\n            message = 'Вы не ввели название ГРС!\\n'\r\n\r\n        exl_file_name = grs_name + '_статистика.xlsx'\r\n        connection = sqlite3.connect(database_path)\r\n        cur = connection.cursor()\r\n        cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS grs_stat(\r\n        data_id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        grs_id INTEGER NOT NULL,\r\n        name_output VARCHAR(15) NOT NULL,\r\n        date TIMESTAMP NOT NULL,\r\n        nominal_capacity DECIMAL(8, 4),\r\n        day_capacity DECIMAL(12, 4) NOT NULL,\r\n        hour_capacity DECIMAL(10, 4) NOT NULL,\r\n        pressure DECIMAL(4, 4) NOT NULL,\r\n        temperature DECIMAL(4, 4),\r\n        actual_flow DECIMAL(10, 2),\r\n        FOREIGN KEY (grs_id) REFERENCES grs(grs_id) ON DELETE CASCADE\r\n        );\"\"\")\r\n\r\n        try:\r\n            file_to_read = oxl.load_workbook(exl_file_name, data_only=True)\r\n        except FileNotFoundError:\r\n            txtwin.insert(INSERT, f'По указанному пути файла {exl_file_name} не обнаружено!\\n')\r\n            return\r\n        sheets = file_to_read.sheetnames\r\n\r\n        print(sheets)\r\n\r\n        for sheet in sheets:\r\n            for row in range(4, file_to_read[sheet].max_row + 1):\r\n                data = []\r\n                for col in range(1, 7):\r\n                    value = file_to_read[sheet].cell(row, col).value\r\n                    if value is None:\r\n                        break\r\n                    else:\r\n                        data.append(value)\r\n                try:\r\n                    cur.execute(f\"\"\"INSERT INTO grs_stat(name_output, date, nominal_capacity, \r\n                    day_capacity, hour_capacity, pressure, temperature, grs_id)\r\n                    VALUES(?, ?, ?, ?, ?, ?, ?,\r\n                    (SELECT grs_id FROM grs WHERE name_grs = '{grs_name}'));\"\"\",\r\n                                (sheet, data[0], data[1], data[2], data[3], data[4], data[5]))\r\n                except IndexError:\r\n                    pass\r\n                    # print('В исходной таблице Excel имеются пустые строчки')\r\n\r\n            txtwin.insert(INSERT, f'База данных успешно обновлена! Обнаружено '\r\n                                  f'{file_to_read[sheet].max_row} на вкладке {sheet}\\n')\r\n\r\n        \"\"\"если ты надобавлял дубликатов, то этот запрос должен их тут же удалить\"\"\"\r\n        cur.execute(\"\"\"DELETE FROM grs_stat\r\n        WHERE data_id not in (\r\n        SELECT min(data_id) FROM grs_stat \r\n        GROUP BY name_output, date, grs_id);\"\"\")\r\n        connection.commit()\r\n        connection.close()\r\n\r\n    def calc_actual_flow():\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n        grs_name = grs_cmb.get()\r\n\r\n        cur.execute(f\"\"\"SELECT hour_capacity, pressure, temperature, data_id FROM grs_stat \r\n        WHERE grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_name}')\"\"\")\r\n        states = cur.fetchall()\r\n        rates = [state[0] * 1000 for state in states]\r\n        pressures = [state[1] * 98100 / 1000000 for state in states]\r\n        temperatures = [state[2] for state in states]\r\n        data_id_list = [id[3] for id in states]\r\n        gas = Gas(get_composition(grs_cmb.get()), temperatures[0], pressures[0], rates[0]) #первичная инициализация\r\n        actual_flows = []\r\n        for i in range(len(states)):\r\n            try:\r\n                if rates[i] == 0:  # клёво я придумал оптимизировать эти расчёты, если расхода нет, зачем инициализировать весь газ\r\n                    actual_flows.append(0)\r\n                else:\r\n                    actual_flows.append(gas.get_actual_rate(temperatures[i], pressures[i]))\r\n            except ValueError:\r\n                actual_flows.append(actual_flows[-1] * rates[i] / rates[i - 1] *\r\n                                    (pressures[i - 1] + 0.101325) / (pressures[i] + 0.101325) *\r\n                                    (temperatures[i] + 273.15) / (273.15 + temperatures[i - 1]))\r\n            cur.execute(f\"\"\"UPDATE grs_stat SET actual_flow = {actual_flows[i]} WHERE data_id = {data_id_list[i]}\"\"\")\r\n            connection.commit()\r\n            print(f'Прогресс {round(100 * i / len(states), 2)}%')\r\n\r\n    record_data_root = Tk()\r\n    record_data_root.geometry('800x1000')\r\n    record_data_root.title('Запись в базу данных')\r\n\r\n    txtwin = scrolledtext.ScrolledText(record_data_root, width=80, height=15, bg=\"darkgreen\", fg='white')\r\n    txtwin.pack(pady=10)\r\n\r\n    lbl = Label(record_data_root, text='Название ГРС')\r\n    lbl.pack()\r\n\r\n    grs_cmb = Combobox(record_data_root)\r\n    grs_cmb['values'] = get_grs_name()\r\n    grs_cmb.current(0)\r\n    grs_cmb.pack()\r\n\r\n    lbl = Label(record_data_root, text='Пусть к базе данных\\nПуть по умолчанию вводить не обязательно')\r\n    lbl.pack()\r\n    db_path_entry = Entry(record_data_root)\r\n    db_path_entry.pack()\r\n\r\n    record_btn = Button(record_data_root, text='Запись', command=export_to_sqlite, bg='darkgreen', fg='white')\r\n    record_btn.pack()\r\n\r\n    calc_flow_btn = Button(record_data_root, text='Расчёт актуального расхода',\r\n                           command=calc_actual_flow, bg='darkgreen', fg='white')\r\n    calc_flow_btn.pack()\r\n\r\n    record_data_root.mainloop()\r\n\r\n\r\n# drop_table(database_path)\r\n\r\n# export_to_sqlite(database_path, grs_name)\r\n\r\n\r\n\"\"\"Главная функция, создающая интерфейс и содержащая в себе все основные функции\"\"\"\r\n\r\ndef make_stat_root():\r\n    \"\"\"когда изменяется название ГРС в комбобоксе, автоматически обновляются варианты выходов\"\"\"\r\n\r\n    def on_combobox_select(event):\r\n        connection = sqlite3.connect(database_path)\r\n        grs_name = event.widget.get()\r\n        \"\"\"этот запрос ищет названия выходов, чтобы ты мог выбрать какой тебе вписать\"\"\"\r\n        outputs_names = list(pd.read_sql(f\"SELECT DISTINCT name_output as'Выход' \"\r\n                                         f\"FROM grs_stat \"\r\n                                         f\"WHERE grs_id = (\"\r\n                                         f\"SELECT grs_id \"\r\n                                         f\"FROM grs \"\r\n                                         f\"WHERE name_grs = '{grs_name}');\", connection)['Выход'])\r\n        if len(outputs_names) > 1:\r\n            outputs_names.append('Вход')\r\n        combo_outputs['values'] = outputs_names\r\n        combo_outputs.set(outputs_names[0])\r\n\r\n    def get_stat_db():\r\n        output_name = combo_outputs.get()\r\n        name_grs = combo_grs.get()\r\n        connection = sqlite3.connect(database_path)\r\n\r\n        key = combo_season.get()\r\n        if key == 'Весь период':\r\n            if output_name == 'Вход':\r\n                query = f\"\"\"SELECT date AS 'Дата', ROUND( pressure * 0.0981, 4) as '{parameters_list[0]}',\r\n                 ROUND(SUM(hour_capacity)*1000, 0) AS '{parameters_list[1]}', temperature AS '{parameters_list[2]}', \r\n                 ROUND(SUM(actual_flow), 0) AS '{parameters_list[3]}' FROM grs_stat\r\n                                WHERE grs_id  = (SELECT grs_id FROM grs WHERE name_grs = '{name_grs}')\r\n                                GROUP BY date;\"\"\"\r\n            else:\r\n                query = f\"\"\"SELECT date as 'Дата',\r\n                            ROUND( pressure * 0.0981, 4) as '{parameters_list[0]}',\r\n                              ROUND(hour_capacity * 1000, 1) as '{parameters_list[1]}',\r\n                              temperature AS '{parameters_list[2]}', actual_flow AS '{parameters_list[3]}'\r\n                               FROM grs_stat WHERE name_output = '{output_name}';\"\"\"\r\n        else:\r\n            i = seasons[key]\r\n            if output_name == 'Вход':\r\n                query = f\"\"\"SELECT date AS 'Дата', ROUND( pressure * 0.0981, 4) as '{parameters_list[0]}',\r\n                 ROUND(SUM(hour_capacity)*1000, 0) AS '{parameters_list[1]}', temperature AS '{parameters_list[2]}',\r\n                  ROUND(SUM(actual_flow), 0) AS '{parameters_list[3]}'FROM grs_stat\r\n                        WHERE (date LIKE '____-{months[3 * i - 1]}-__%' \r\n                        OR  date LIKE'____-{months[3 * i]}-__%' \r\n                        OR date LIKE '____-{months[3 * i + 1]}-__%') \r\n                        AND (grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{name_grs}'))\r\n                        GROUP BY date;\r\n                        \"\"\"\r\n            else:\r\n                query = f\"\"\"SELECT date AS 'Дата', ROUND( pressure * 0.0981, 4) as '{parameters_list[0]}',\r\n                 ROUND(SUM(hour_capacity)*1000, 0) AS '{parameters_list[1]}', temperature AS '{parameters_list[2]}', \r\n                   actual_flow AS '{parameters_list[3]}' FROM grs_stat\r\n                        WHERE (date LIKE '____-{months[3 * i - 1]}-__%' \r\n                        OR  date LIKE'____-{months[3 * i]}-__%' \r\n                        OR date LIKE '____-{months[3 * i + 1]}-__%') \r\n                        AND (name_output = '{output_name}')\r\n                        GROUP BY date;\r\n                        \"\"\"\r\n\r\n        return pd.read_sql(query, connection)\r\n\r\n    def filter(df):\r\n        \"\"\"эта функция проводит фильтр значений (первый аргумент) по вычисляемому тут порогу (второй аргумент)\"\"\"\r\n        column = combo_column.get()\r\n        std = df[column].std()\r\n        threshold = float(format(threshold_entry.get().replace(',', '.')))\r\n        limit = threshold * std\r\n        return df[abs(df[column] - df[column].mean()) <= limit]\r\n\r\n    def scam(df):\r\n        \"\"\"эта функция проводит фильтр значений (первый аргумент) по вычисляемому тут порогу (второй аргумент)\"\"\"\r\n        column = combo_column.get()\r\n        std = df[column].std()\r\n        threshold = float(format(threshold_entry.get().replace(',', '.')))\r\n        limit = threshold * std\r\n        return df[abs(df[column] - df[column].mean()) > limit]\r\n\r\n    def filtered_plot():\r\n        # Построение графика\r\n        name_grs = combo_grs.get()\r\n        column = combo_column.get()\r\n        season = combo_season.get()\r\n        df = get_stat_db()\r\n        filtered = filter(df).sort_values(by=['Дата'])\r\n        scamed = scam(df).sort_values(by=['Дата'])\r\n        threshold = float(format(threshold_entry.get().replace(',', '.')))\r\n        limit = df[column].std() * threshold\r\n        output_name = combo_outputs.get()\r\n        plt.figure(figsize=(16, 8))\r\n        plt.plot(filtered.index,\r\n                 filtered[column],\r\n                 label='Принятые значения',\r\n                 marker='o',\r\n                 linestyle='-',\r\n                 color='blue',\r\n                 markersize=3)\r\n        plt.plot(scamed.index,\r\n                 scamed[column],\r\n                 marker='o',\r\n                 label='Вылетевшие точки',\r\n                 color='red',\r\n                 linestyle='',\r\n                 markersize=3)\r\n        plt.axhline(y=df[column].mean(), color='gray', linestyle='--', label='Среднее значение')\r\n        plt.axhline(y=df[column].mean() + limit, color='green', linestyle='--', label='Верхний порог')\r\n        if column != 'Температура':\r\n            if df[column].mean() - limit < 0:\r\n                plt.axhline(y=0, color='green', linestyle='--', label='Нижний порог')\r\n            else:\r\n                plt.axhline(y=df[column].mean() - limit, color='green', linestyle='--', label='Нижний порог')\r\n        plt.xlim(0, df.shape[0])\r\n        plt.legend()\r\n        plt.xlabel('Дата')\r\n        mesuares = {parameters_list[0]: ', МПа (изб.)', parameters_list[1]: ', ст. м3/ч',\r\n                    parameters_list[2]: ', °С', parameters_list[3]: ', м3/ч'}\r\n        mesuare = mesuares[column]\r\n        plt.ylabel(column + mesuare)\r\n        plt.title(f'{column} газа {name_grs}, {output_name}, {season}')\r\n        plt.grid(False)\r\n        plt.show()\r\n\r\n    def draw_plot():\r\n        \"\"\"считываем базу данных\"\"\"\r\n\r\n        output_name = combo_outputs.get()\r\n        column = combo_column.get()\r\n        grs_name = combo_grs.get()\r\n        season = combo_season.get()\r\n        df = get_stat_db()\r\n\r\n        df.sort_values(by=['Дата'])\r\n        dates = pd.date_range(start=df['Дата'].min(), end=df['Дата'].max(), freq='D')\r\n        if (len(dates)) > (len(list(df[column]))):\r\n            dates = df.index\r\n            day_mesuare = f'Дни сезона {season}'\r\n        else:\r\n            day_mesuare = 'Дата'\r\n        plt.figure(figsize=(16, 8))\r\n        plt.plot(dates, df[column], marker='o', linestyle='-', color='blue', markersize=3)\r\n        plt.xlabel(day_mesuare)\r\n        mesuares = {parameters_list[0]: ', МПа (изб.)', parameters_list[1]: ', ст. м3/ч',\r\n                    parameters_list[2]: ', °С', parameters_list[3]: ', м3/ч'}\r\n        mesuare = mesuares[column]\r\n        plt.ylabel(column + mesuare)\r\n        plt.title(f'{column} ГРС {grs_name}, {output_name}, {season}')\r\n        plt.grid(linewidth=1, linestyle='-', color='grey')\r\n        plt.show()\r\n\r\n    def clean():\r\n        txtwin.delete(1.0, END)\r\n\r\n    def statistic():\r\n        clean()\r\n        grs_name = combo_grs.get()\r\n        column = combo_column.get()\r\n        output_name = combo_outputs.get()\r\n        df = get_stat_db()\r\n\r\n        average_min = round(df[column].min(), 4)\r\n        average_mean = round(df[column].mean(), 4)\r\n        average_max = round(df[column].max(), 4)\r\n        if column == 'Давление':\r\n            mesuare = 'МПа (изб.)'\r\n        elif column == 'Расход':\r\n            mesuare = 'ст. м3/ч'\r\n        else:\r\n            mesuare = ''\r\n        txtwin.insert(INSERT, (f'Абсолютные значения за период {combo_season.get()}\\n'\r\n                               f'ГРС {grs_name}, параметр {column}:\\n'\r\n                               f'максимум {average_max} {mesuare}\\n'\r\n                               f'среднее {average_mean} {mesuare}\\n'\r\n                               f'минимум {average_min} {mesuare}\\n\\n'))\r\n        filtered = filter(df)\r\n        scamed = scam(df)\r\n        average_min = round(filtered[column].min(), 4)\r\n        average_mean = round(filtered[column].mean(), 4)\r\n        average_max = round(filtered[column].max(), 4)\r\n        txtwin.insert(INSERT, (f'Обработанные значения за период {combo_season.get()}\\n'\r\n                               f'ГРС {grs_name}, параметр {column}:\\n'\r\n                               f'максимум {average_max} {mesuare}\\n'\r\n                               f'среднее {average_mean} {mesuare}\\n'\r\n                               f'минимум {average_min} {mesuare}\\n'\r\n                               f'отброшенных точек - {scamed.shape[0]} ({round(scamed.shape[0] / df.shape[0] * 100, 2)}%)\\n\\n'))\r\n        filtered_plot()\r\n\r\n    connection = sqlite3.connect(database_path)\r\n\r\n    cur = connection.cursor()\r\n\r\n    try:\r\n        cur.execute(\"\"\"SELECT DISTINCT name_grs FROM grs WHERE grs_id IN (SELECT DISTINCT grs_id FROM grs_stat);\"\"\")\r\n    except sqlite3.OperationalError:\r\n        record_data()\r\n        pass\r\n\r\n    grs_combo = [grs[0] for grs in cur.fetchall()]  # получили все ГРС, которые были в базе данных по статистике ГРС\r\n    print(grs_combo)\r\n\r\n    if grs_combo == []:\r\n        record_data()\r\n    else:\r\n\r\n        stat_root = Tk()\r\n        stat_root.geometry('800x1000')\r\n        stat_root.title('Статистика ГРС')\r\n\r\n        \"\"\"создали комбобокс с именами ГРС, по умолчанию там стоит первая ГРС в списке\"\"\"\r\n        lbl = Label(stat_root, text='ГРС')\r\n        lbl.pack()\r\n        combo_grs = Combobox(stat_root, justify='center')\r\n        combo_grs['values'] = grs_combo\r\n        combo_grs.current(0)\r\n        combo_grs.pack()\r\n        combo_grs.bind('<<ComboboxSelected>>', on_combobox_select)\r\n\r\n        \"\"\"создали комбобокс с параметрами, по которым можно делать статистику\"\"\"\r\n        lbl = Label(stat_root, text='Параметр')\r\n        lbl.pack()\r\n        combo_column = Combobox(stat_root, justify='center')\r\n        parameters_list = ['Давление', 'Расход', 'Температура', 'Расход при р.у.']\r\n        combo_column['values'] = parameters_list\r\n        combo_column.current(0)\r\n        combo_column.pack(pady=10)\r\n\r\n        grs_name = combo_grs.get()\r\n        outputs_names = list(pd.read_sql(f\"SELECT DISTINCT name_output as'Выход' \"\r\n                                         f\"FROM grs_stat \"\r\n                                         f\"WHERE grs_id = (\"\r\n                                         f\"SELECT grs_id \"\r\n                                         f\"FROM grs \"\r\n                                         f\"WHERE name_grs = '{grs_name}');\", connection)['Выход'])\r\n        if len(outputs_names) > 1:\r\n            outputs_names.append('Вход')\r\n        \"\"\"создали комбобокс с названиями выходов ГРС, указанной в комбобоксе имен ГРС\"\"\"\r\n        lbl = Label(stat_root, text='Выход')\r\n        lbl.pack()\r\n        combo_outputs = Combobox(stat_root, justify='center')\r\n        combo_outputs['values'] = outputs_names\r\n        combo_outputs.current(0)\r\n        combo_outputs.pack(pady=10)\r\n\r\n        txtwin = scrolledtext.ScrolledText(stat_root, width=80, height=25, bg=\"darkgreen\", fg='white')\r\n        txtwin.pack(pady=10)\r\n\r\n        command_list = [draw_plot, statistic, clean, record_data]\r\n        btn_list = ['График', 'Стат. Анализ', 'Очистить', 'Добавить новые данные']\r\n        color_list = ['red', 'green', 'purple', 'blue', 'yellow', 'white']\r\n\r\n        for btn in range(len(btn_list)):\r\n            btn = Button(stat_root, text=btn_list[btn], command=command_list[btn],\r\n                         bg='black', fg=random.choice(color_list))\r\n            btn.pack(pady=10)\r\n        lbl = Label(stat_root, text='Период анализа')\r\n        lbl.pack()\r\n        combo_season = Combobox(stat_root, justify='center')\r\n        combo_season['values'] = list(seasons.keys())\r\n        combo_season.current(0)\r\n        combo_season.pack()\r\n\r\n        lbl = Label(stat_root, text='количество доверительных стандартных отклонений')\r\n        lbl.pack(pady=10)\r\n\r\n        threshold_entry = Entry(stat_root, justify='center', relief='sunken')\r\n        threshold_entry.pack()\r\n        threshold_entry.insert(END, '3')\r\n\r\n        stat_root.mainloop()\r\n\r\n\r\n\"\"\"создает таблицу из excel файла с помощью панды\"\"\"\r\ndef export_to_sqlite_pandas(exl_file_name, database_path):\r\n    df = pd.read_excel(exl_file_name)\r\n    con = sqlite3.connect(database_path)\r\n    df.to_sql('grs_stat', con, index=True, if_exists='replace')\r\n    con.commit()\r\n    con.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/grs_stat.py b/core/grs_stat.py
--- a/core/grs_stat.py	(revision ac3036f97d966ff3a1bb8a72571c75e762b9a3a3)
+++ b/core/grs_stat.py	(date 1724089776892)
@@ -51,7 +51,7 @@
     return composition
 
 
-database_path = r'C:\Users\Идель\PycharmProjects\pythonProject2\grs_database.db'
+database_path = 'grs_database.db'
 
 months = ('01', '02', '03', '04',
           '05', '06', '07', '08',
@@ -72,7 +72,7 @@
 
         database_path = db_path_entry.get()
         if database_path == '':
-            database_path = r'C:\Users\Идель\PycharmProjects\pythonProject2\grs_database.db'
+            database_path = 'grs_database.db'
             message = 'Прописан стандартный путь к базе данных\n'
         grs_name = grs_cmb.get()
         if grs_name == '':
Index: core/grs_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\r\nimport random\r\nimport sqlite3\r\nimport turtle\r\nfrom tkinter import *\r\nfrom tkinter import scrolledtext\r\nfrom tkinter.ttk import Combobox\r\nimport tkinter.ttk as ttk\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\n\r\nimport docx\r\n\r\nimport grs_stat\r\nfrom core.model.entity.Gas import Gas\r\nfrom core.model.entity.Pipeline import Pipeline\r\nfrom core.model.entity.Vessel import Vessel\r\n\r\ncomponent_list = ['Methane', 'Ethane', 'Propane', 'Isobutane', 'Butane',\r\n                 'Isopentane', 'Pentane', 'Hexane', 'Oxygen',\r\n                 'Nitrogen', 'CarbonDioxide']\r\ncomponent_list_for_query = ['methane', 'ethane', 'propane', 'isobutane', 'butane',\r\n                 'isopentane', 'pentane', 'hexane', 'oxygen',\r\n                 'nitrogen', 'carbon_dioxide']\r\n\r\n\"\"\"функция выполнения sql запросов, расположенных в текстовом файле\"\"\"\r\ndef sql_query(file_name, *args):\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    with open(file_name, 'r', encoding='utf-8') as f:\r\n        queries = f.read().split(';')\r\n    for query in queries:\r\n        cur.execute(query, args)\r\n    connection.commit()\r\n\r\n\r\ndef get_grs_name():\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    cur.execute(\"\"\"SELECT name_grs FROM grs\"\"\")\r\n    grs_list = [grs[0] for grs in cur.fetchall()]\r\n    connection.close()\r\n    return grs_list\r\n\r\n\r\n\"\"\"выбирает данные указанного столбца указанной таблицы для указанной грс, написано плохо,\r\nтак как привязано к grs_id, а он не везде в таблицах есть\"\"\"\r\ndef get_column_data(column_name, table, name_grs):\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    cur.execute(f\"\"\"SELECT {column_name} FROM {table} WHERE grs_id = \r\n    (SELECT grs_id FROM grs WHERE name_grs = '{name_grs}')\"\"\")\r\n    data_list = [data[0] for data in cur.fetchall() if data[0] is not None]\r\n    if data_list == []:\r\n        data_list = ['Данные отсутствуют']\r\n    connection.close()\r\n    return data_list\r\n\r\n\r\n\"\"\"эта функция получает состав газа ГРС с заданным именем, параметр нормализации отвечает за приведение\r\nсостава к такому, чтобы сумма компонентов была крайне близка к 1\"\"\"\r\ndef get_composition(name_grs, normolize=True):\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    component_list_query = ', '.join(component for component in component_list_for_query)\r\n    cur.execute(f\"\"\"SELECT {component_list_query} FROM composition\r\n                    WHERE grs_id = (SELECT grs_id FROM grs \r\n                    WHERE name_grs = '{name_grs}');\"\"\")\r\n    values = cur.fetchone()\r\n    if normolize == True:\r\n        while abs(sum(values) - 1) > 10e-10:\r\n            values = [component + ((1 - sum(values)) * component) for component in values]\r\n    composition = dict(zip(component_list, values))\r\n    connection.close()\r\n    return composition\r\n\r\n\"\"\"список файлов, содержащих запросы для создания и наполнения таблиц данными\"\"\"\r\nfile_list = ['create_grs_table',\r\n             'insert_grs_data',\r\n             'insert_grs_compositions',\r\n             'equipment_list']\r\n\r\n\r\n\"\"\"выполнение всех запросов, находящихся во всех файлах\"\"\"\r\ndef reboot_data():\r\n    for file in file_list:\r\n        file +='.txt'\r\n        sql_query(file)\r\n        print(f'обработка таблицы {file}, прошла успешно!')\r\n    print(f'создание таблиц и их наполнение прошло успешно!')\r\n\r\n\r\n\"\"\"Так как мне лень, эта функция переводит нормализованный состав газа в удобоваримый для хайсиса вариант\"\"\"\r\ndef composition_to_hysys(name_grs):\r\n    composition = [value for value in get_composition(name_grs).values()]\r\n    file_name = f'{name_grs} состав для Hysys.txt'\r\n    with open(file_name, 'w', encoding='utf-8') as f:\r\n        for value in composition:\r\n            f.write(f'{value}\\n')\r\n\r\n\r\n# ОКНО --- Работа с базой данных ГРС\r\ndef grs_data():\r\n    grs_data_root = Tk()\r\n    grs_data_root.title('Работа с базой данных ГРС')\r\n    grs_data_root.geometry('1920x1080')\r\n\r\n    txtwin = scrolledtext.ScrolledText(grs_data_root, width=150, height=15, bg=\"darkgreen\", fg='white')\r\n    txtwin.pack()\r\n\r\n    text = Text(grs_data_root, width=100, height=30)\r\n    text.pack(pady=10)\r\n\r\n    lbl = Label(grs_data_root, text='файл с запросами', font=(\"Arial Bold\", 10))\r\n    lbl.pack(pady=10)\r\n\r\n    entry = Entry(grs_data_root, width=20)\r\n    entry.pack(pady=5)\r\n\r\n\r\n    def make_query():\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n        if entry.get() != '':\r\n            path = entry.get() + '.txt'\r\n            sql_query(path)\r\n            print(f'запрос из файла {path} успешно выполнен')\r\n        else:\r\n            query = text.get(1.0, END)\r\n            cur.execute(query)\r\n            result = cur.fetchall()\r\n            txtwin.insert(INSERT, result)\r\n            connection.commit()\r\n            print('Запрос выполнен успешно!')\r\n            txtwin.insert(INSERT, '\\nЗапрос выполнен успешно!\\n')\r\n    def clear():\r\n        txtwin.delete(1.0, END)\r\n\r\n\r\n    query_btn = Button(grs_data_root, text='Сделать запрос', command = make_query, bg='blue', fg='white')\r\n    query_btn.pack()\r\n\r\n    clear_btn = Button(grs_data_root, text='Почистить', command=clear, bg='green', fg='white')\r\n    clear_btn.pack()\r\n\r\n    btn = Button(grs_data_root, text='Пересоздать данные', command=reboot_data, bg='red', fg='white')\r\n    btn.pack()\r\n\r\n\r\n    grs_data_root.mainloop()\r\n\r\n\"\"\"рисует схему трубопроводов по заданным в базе данных координатам\"\"\"\r\ndef pipe_draw():\r\n\r\n    \"\"\"рисует линию если надо, если не надо, то не рисует, всё логично\"\"\"\r\n    def draw_arrow(x, y, draw_line=True, color='Blue'):\r\n        t.color(color)\r\n        if draw_line:\r\n            t.goto(x, y)\r\n        else:\r\n            t.penup()\r\n            t.goto(x, y)\r\n            t.pendown()\r\n\r\n\r\n    pipe_id_list = []\r\n    x_coord_list = []\r\n    y_coord_list = []\r\n\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n    cur.execute(\"\"\"SELECT * FROM knots\"\"\")\r\n    for i, j, k, n in cur.fetchall():\r\n        pipe_id_list.append(j)\r\n        x_coord_list.append(k)\r\n        y_coord_list.append(n)\r\n\r\n    color_list = ['Blue', 'Red', 'Green', 'Purple']\r\n\r\n    t = turtle.Turtle()\r\n    t.shape('arrow')\r\n    color = 'Blue'\r\n    t.color(color)\r\n    t.speed(10)\r\n    t.penup()\r\n    start_pos = (-600, 400)\r\n    t.setpos(*start_pos)\r\n    t.pendown()\r\n    t.pensize(5)\r\n    print(max(y_coord_list, key=abs))\r\n    y_turtle_scale = abs(800 / max(y_coord_list, key=abs))\r\n    x_turtle_scale = abs(1200 / max(x_coord_list, key=abs))\r\n\r\n\r\n    for x, y, color in zip(x_coord_list, y_coord_list, pipe_id_list):\r\n        x = x * x_turtle_scale + start_pos[0]\r\n        y = y * y_turtle_scale + start_pos[1]\r\n        colour = color_list[color-1]\r\n        draw_arrow(x, y, True, colour)\r\n\r\n\r\n# ОКНО --- Расчёт трубопроводов\r\ndef pipe_wall_root():\r\n    pipe_root = Tk()\r\n    pipe_root.geometry(\"1920x1080\")\r\n    pipe_root.title('Расчёт трубопроводов')\r\n\r\n    connection = sqlite3.connect('grs_database.db')\r\n\r\n    cur = connection.cursor()\r\n\r\n    cur.execute(\"\"\"SELECT class FROM class_mat;\"\"\")\r\n    class_list = [cathegory[0] for cathegory in cur.fetchall()]\r\n\r\n    txtwin = scrolledtext.ScrolledText(pipe_root, width=170, height=15, bg=\"darkgreen\", fg='white')\r\n    txtwin.pack()\r\n\r\n    text = Text(pipe_root, width=100, height=15)\r\n    text.pack(pady=10)\r\n\r\n\r\n    entry_list = []\r\n    lbl_list = []\r\n\r\n    blocks_data = ['Узел переключения', 'Узел очистки', 'Узел предотвращения гидратообразования',\r\n                   'Узел смешения', 'Узел учёта', 'Узел обводной линии', 'Узел одоризации']\r\n\r\n    combo_blocks = Combobox(pipe_root, width=50)\r\n    combo_blocks['values'] = blocks_data\r\n    block_lbl = Label(pipe_root, text='Узел')\r\n    block_lbl.pack()\r\n    combo_blocks.pack()\r\n    pipe_data = ['DN', 'PN', 'внешний диаметр', 'толщина стенки', 'материал', 'категория прочности',\r\n                     'длина']\r\n\r\n    lbl = Label(pipe_root, text='файл с запросами', font=(\"Arial Bold\", 10))\r\n    lbl.pack()\r\n\r\n    entry = Entry(pipe_root, width=20)\r\n    entry.pack()\r\n    grs_lbl = Label(pipe_root, text='Наименование ГРС')\r\n    grs_lbl.pack()\r\n    combo = Combobox(pipe_root)\r\n    combo['values'] = get_grs_name()\r\n    combo.current(0)\r\n    combo.pack()\r\n\r\n    pipe_root.mainloop()\r\n\r\n\r\ndef pipe_shell_thickness(name_grs):\r\n    connection = sqlite3.connect('grs_database.db')\r\n    cur = connection.cursor()\r\n\r\n    \"\"\"запрос в базу данных по характеристикам материалов\"\"\"\r\n    cur.execute(\"\"\"SELECT temp_resistance_min\r\n     FROM pipes as p INNER JOIN class_mat as cm \r\n     ON p.strength_category = cm.class \r\n     LIMIT 1;\r\n    \"\"\")\r\n    R1n = cur.fetchone()[0]\r\n    print(f'минимальное временное сопротивление материала труб составило {R1n}')\r\n    k1 = 1.55\r\n    kn = 1.1\r\n    n = 1.1\r\n    m = 0.66\r\n    R1 = round(R1n * m / k1 / kn, 2)\r\n\r\n    print(f'расчётная величина R1 - - - > {R1}')\r\n    cur.execute(f\"\"\"SELECT inlet_design_pressure FROM grs WHERE name_grs = '{name_grs}';\"\"\")\r\n    design_pressure = cur.fetchone()[0]\r\n    print(f'Для ГРС {name_grs} проектное давление на входе задано как {design_pressure}')\r\n\r\n    \"\"\"этот запрос вытягивает из базы данных выбранной ГРС все трубы, что там есть и \"\"\"\r\n    cur.execute(f\"\"\"SELECT DISTINCT external_diameter \r\n    FROM pipes \r\n    WHERE grs_id = (\r\n        SELECT grs_id \r\n        FROM grs \r\n        WHERE name_grs = '{name_grs}') \r\n    ORDER BY 1 DESC;\"\"\")\r\n    diameters_list = [diameter[0] for diameter in cur.fetchall()]\r\n\r\n    calc_thickness_list = []\r\n\r\n    for diameter in diameters_list:\r\n        calc_thickness = n * design_pressure * diameter / 2 / (R1 + n * design_pressure)\r\n        calc_thickness_list.append(round(calc_thickness, 2))\r\n        print(f'Для трубы {diameter} мм расчётная толщина стенки ----> {round(calc_thickness, 2)}')\r\n\r\n\r\n# ОКНО --- Расчёт скорости в трубопроводах\r\ndef veloсity_calc():\r\n    velocity_root = Tk()\r\n    velocity_root.geometry(\"1920x1080\")\r\n    velocity_root.title('Расчёт скорости в трубопроводах')\r\n    combo = Combobox(velocity_root)\r\n    combo['values'] = get_grs_name()\r\n    combo.current(0)\r\n    combo.grid(column=100, row=0)\r\n\r\n    manual_input = ['Давление, МПа', 'Температура, °С', 'Расход', 'Диаметр Ду, мм']\r\n\r\n    lbl = []\r\n    txt = []\r\n\r\n    for i in range(len(manual_input)):\r\n        lbl.append(Label(velocity_root, text=manual_input[i], font=(\"Arial Bold\", 14)))\r\n        lbl[i].grid(column=500, row=100 * i)\r\n\r\n        entry = Entry(velocity_root, width=10, justify='center')\r\n        entry.grid(column=600, row=100 * i)\r\n        txt.append(entry)\r\n    txtwin = scrolledtext.ScrolledText(velocity_root, width=80, height=40, bg=\"darkgreen\", fg='white')\r\n    txtwin.grid(column=10, row=500)\r\n\r\n    interface_buttons = ['Скорость газа',\r\n                         'Плотность газа',\r\n                         'Подбор диаметра',\r\n                         'Очистить окно вывода',\r\n                         'Рассчитать всю ГРС']\r\n\r\n    def calc():\r\n        \"\"\"Рассчитывает скорость газа в трубопроводе\"\"\"\r\n\r\n        chois = get_composition(combo.get())\r\n\r\n        result = (f'Запуск расчёта ГРС {format(combo.get())}\\n')\r\n        txtwin.insert(INSERT, result)\r\n        res = [format(data.get()) for data in txt]\r\n        if '' in res:\r\n            result = 'Данные введены не полностью!\\n'\r\n            txtwin.insert(INSERT, result)\r\n            return\r\n        pressure = float(res[0].replace(',', '.'))\r\n        temperature = float(res[1].replace(',', '.'))\r\n        rate = float(res[2].replace(',', '.'))\r\n        internal_diameter = float(res[3].replace(',', '.'))\r\n\r\n        pipe = Pipeline(internal_diameter, 0, 0)\r\n        gas = Gas(chois, temperature, pressure, rate)\r\n        velosity = gas.actual_rate / pipe.area / 3600\r\n        capacity = round(25 * rate / velosity)\r\n        result = (f'При давлении {pressure} МПа\\n'\r\n                  f'температуре {temperature} °C\\n'\r\n                  f'расходе {rate}  ст м3/ч\\n'\r\n                  f'в трубопроводе Ду {internal_diameter} мм\\n'\r\n                  f'Скорость составила {round(velosity, 2)} м/с \\n'\r\n                  f'Пропускная способность основных линий {capacity} ст. м3/ч\\n'\r\n                  f'Для обводных линий {capacity * 50 / 25} ст. м3/ч\\n')\r\n        txtwin.insert(INSERT, result)\r\n        return velosity\r\n\r\n\r\n    def density():\r\n        \"\"\"выводит на экран плотность газа при рабочих,нормальных, стандартных условиях, актуальный расход газа\"\"\"\r\n        chois = get_composition(combo.get())\r\n\r\n        res = [format(data.get()) for data in txt]\r\n        pressure = float(res[0].replace(',', '.'))\r\n        temperature = float(res[1].replace(',', '.'))\r\n        rate = float(res[2].replace(',', '.'))\r\n        gas = Gas(chois, temperature, pressure, rate)\r\n        result = (\r\n            f'Газ ГРС {format(combo.get())}.\\nПлотность при рабочих условиях {round(gas.actual_density, 2)} кг/м3 \\nПлотность при нормальных условиях {round(gas.normal_density, 4)} кг/м3 \\n'\r\n            f'Плотность при стандартных условиях {round(gas.standard_density, 4)} кг/м3 \\n'\r\n            f'Расход газа при рабочих условиях {round(gas.actual_rate, 2)} м3/ч\\n'\r\n            f'Молярная масса газа {round(gas.molecular_mass, 2)} кг/кмоль\\n')\r\n        txtwin.insert(INSERT, result)\r\n\r\n    def pipecheck():\r\n        \"\"\"определяет требуемый диаметр трубопровода чтобы скорость была в порядке\"\"\"\r\n        chois = get_composition(combo.get())\r\n        velosity_limit = 25\r\n        result = (f'Запуск расчёта ГРС {format(combo.get())}\\n')\r\n        txtwin.insert(INSERT, result)\r\n        res = [format(data.get()) for data in txt]\r\n        pressure = float(res[0].replace(',', '.'))\r\n        temperature = float(res[1].replace(',', '.'))\r\n        rate = float(res[2].replace(',', '.'))\r\n        gas = Gas(chois, temperature, pressure, rate)\r\n        actual_flow = gas.standard_density / gas.actual_density * rate\r\n        internal_diameter = (actual_flow * 4 / 3600 / velosity_limit / math.pi) ** 0.5 * 1000\r\n        result = (f'Минимальный диаметр прохода {round(internal_diameter, 2)}, мм \\n')\r\n        txtwin.insert(INSERT, result)\r\n\r\n    def clean():\r\n        txtwin.delete(1.0, END)  # чистит окно вывода\r\n\r\n    def full_calc():\r\n        name_grs = combo.get()\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n        print(name_grs)\r\n        cur.execute(f\"\"\"SELECT pipe_diameter, wall FROM tvps WHERE block_id = \r\n                        (SELECT block_id FROM blocks WHERE grs_id = \r\n                        (SELECT grs_id FROM grs WHERE name_grs  = '{format(combo.get())}'))\"\"\"\r\n                    )\r\n\r\n        print(f'начинаю расчёт ТВПС ГРС {name_grs}')\r\n        gas_velocity = []\r\n        diameter_list = []\r\n        for ex_diameter, wall in cur.fetchall():\r\n            diameter_list.append(float(ex_diameter) - 2 * float(wall))\r\n\r\n        if len(diameter_list) > 0:\r\n            db_load = 'База данных загружена!\\n'\r\n        else:\r\n            db_load = 'База не загружена!!!\\n'\r\n        txtwin.insert(INSERT, db_load)\r\n        for i in range(len(diameter_list)):\r\n            progress = round(i / len(diameter_list) * 100, 2)\r\n            print(f'Рассчитано {progress} %')\r\n            txt[3].insert(0, diameter_list[i])\r\n            gas_velocity.append(calc())\r\n            tvps = round(float(format(txt[2].get())) / calc() * 25)\r\n            if gas_velocity[i] > 25:\r\n                txtwin.insert(INSERT, 'ПРЕВЫШЕНИЕ СКОРОСТИ ГАЗА\\n')\r\n            txtwin.insert(INSERT, '\\n')\r\n            txt[3].delete(0, 'end')\r\n        connection.close()\r\n\r\n    calc_list = [calc, density, pipecheck, clean, full_calc]\r\n    for i in range(len(interface_buttons)):\r\n        btn = Button(velocity_root, text=interface_buttons[i], font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\",\r\n                     command=calc_list[i])\r\n        btn.grid(column=800, row=400 + i * 10)\r\n\r\n    velocity_root.mainloop()\r\n    return\r\n\r\n# ОКНО --- Расчёт ёмкости одоранта\r\ndef odorant_calc():\r\n    odorant_root = Tk()\r\n    odorant_root.geometry(\"1920x1080\")\r\n    odorant_root.title('Расчёт ёмкости одоранта')\r\n    manual_input = ['Вместимость ёмкости', 'Расход газа в ст. м3']\r\n    lbl = []\r\n    txt = []\r\n    for i in range(len(manual_input)):\r\n        lbl.append(Label(odorant_root, text=manual_input[i], font=(\"Arial Bold\", 14)))\r\n        lbl[i].grid(column=500, row=100 * i)\r\n        entry = Entry(odorant_root, width=10, justify='center')\r\n        entry.grid(column=600, row=100 * i)\r\n        txt.append(entry)\r\n\r\n    txtwin = scrolledtext.ScrolledText(odorant_root, width=100, height=50, bg=\"darkgreen\", fg='white')\r\n    txtwin.grid(column=10, row=500)\r\n\r\n    def calc():\r\n        \"\"\"рассчитывает запас одоранта и выводит на экран\"\"\"\r\n        clean()\r\n        res = [format(data.get()) for data in txt]\r\n        if '' in res:\r\n            result = 'Данные введены не полностью!\\n'\r\n            txtwin.insert(INSERT, result)\r\n            return\r\n\r\n        volume = float(res[0].replace(',', '.'))\r\n        rate = float(res[1].replace(',', '.'))\r\n        odorant_vessel = Vessel(0, 0, volume)\r\n\r\n        if odorant_vessel.odorant_time(volume, rate) < 60:\r\n            verdict = 'не'\r\n        else:\r\n            verdict = ''\r\n\r\n        result = (f'Объём одоранта в ёмкости хранения после заправки составляет {volume} м3×0,85 = {volume * 0.85} м3.\\n'\r\n              f'При плотности одоранта 830 кг/м3 масса одоранта составит {volume * 0.85} м3×830 кг/м3 '\r\n                  f'= {odorant_vessel.odorant_mass(volume)} кг.\\n'\r\n              f'При рассчитанном предельном расходе газа через выходной коллектор {rate} м3/ч\\n'\r\n              f'и нормативном расходе одоранта 16 г на 1000 ст. м3 (п. 9.7.2 СТО Газпром 2-3.5-051-2006)\\n'\r\n              f'такого количества хватит на {odorant_vessel.odorant_mass(volume)} кг/ '\r\n                  f'{odorant_vessel.odorant_rate(rate)} кг/ч = '\r\n              f'{odorant_vessel.odorant_mass(volume) / odorant_vessel.odorant_rate(rate)} ч '\r\n                  f'≈ {odorant_vessel.odorant_time(volume, rate)} суток.\\n'\r\n              f'Следовательно, имеющаяся ёмкость хранения одоранта {verdict} обеспечивает пропускную способность\\n'\r\n              f'в соответствии с требованиями СТО Газпром 2-3.5-051-2006, пункт 9.7.6.\\n')\r\n\r\n        #result = f'Запаса одоранта хватит на {odorant_vessel.odorant_time(volume, rate)} дней\\n'\r\n        txtwin.insert(INSERT, result)\r\n\r\n\r\n    def vessel_check():\r\n        \"\"\"рассчитывает необходимый запас одоранта\"\"\"\r\n        rate = float(format(txt[1].get()).replace(',', '.'))\r\n        request_volume = rate / 1000 * 0.016 * 60 * 24 / 830\r\n        result = f'Минимальный требуемый объём ёмкости одоранта {round(request_volume, 2)} м3\\n'\r\n        txtwin.insert(INSERT, result)\r\n\r\n\r\n    def clean():\r\n        \"\"\"чистит окно вывода\"\"\"\r\n        txtwin.delete(1.0, END)\r\n\r\n    interface_buttons = ['Запас', 'Требуемый объём', 'Очистить окно вывода']\r\n    calc_list = [calc, vessel_check, clean]\r\n    for i in range(len(interface_buttons)):\r\n        btn = Button(odorant_root, text=interface_buttons[i], font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\",\r\n                     command=calc_list[i])\r\n        btn.grid(column=800, row=400 + i * 10)  # добавляет кнопки интерфейса\r\n\r\n    return\r\n\r\n\r\ndef valve_calc():\r\n    def create_word():\r\n        return\r\n        mydoc = docx.Document()\r\n        mydoc.add_paragraph('Добрый день! Исходные данные для расчёта пропускной способности клапана:')\r\n        for i in range(len(manual_input)):\r\n            mydoc.add_paragraph(manual_input[i] + 5 * '....' + format(txt[i].get()))\r\n        mydoc.add_paragraph('Состав газа:')\r\n\r\n        calc()  # выполняется расчёт\r\n        for i, j in chois.items():\r\n            mydoc.add_paragraph(i + '----' + str(round(j * 100, 3)) + '%')  # запись исходных данных для расчёта\r\n        mydoc.add_paragraph('Результаты расчёта: ')\r\n        mydoc.add_paragraph('Плотность газа при н.у. ' + str(round(gas.normal_density, 4)) + 'кг/м3')\r\n        mydoc.add_paragraph(result)\r\n\r\n        file_name = 'Результаты расчёта ' + format(combo.get()) + ' ' + format(txt[0].get()) + ' МПа---' + format(\r\n            txt[1].get()) + ' МПа.docx'\r\n\r\n        mydoc.save(file_name)\r\n\r\n    def shift():\r\n        if btn1.cget('text') == 'Расчёт Kv':\r\n            lbl[3].config(text='Расход газа, ст. м3/ч')\r\n            btn1.config(text='Расчёт пропускной способности')\r\n        else:\r\n            lbl[3].config(text='Kv')\r\n            btn1.config(text='Расчёт Kv')\r\n\r\n    def clean():\r\n        txtwin.delete(1.0, END)  # чистит окно вывода\r\n\r\n    def calc(event=None):\r\n        global result\r\n        clean()\r\n\r\n        design_pressure = 5.39\r\n\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n\r\n        res = [format(data.get()) for data in txt]\r\n        if '' in res:\r\n            result = ('!!!Введите исходные данные!!!\\n')\r\n            txtwin.insert(INSERT, result)\r\n            return\r\n\r\n        p1 = float(res[0].replace(',', '.'))\r\n        p2 = float(res[1].replace(',', '.'))\r\n        if p2 >= p1:\r\n            result = 'Обратный перепад давления!\\n' \\\r\n                     'Проверьте исходные данные!'\r\n            txtwin.insert(INSERT, result)\r\n            return\r\n        temperature = float(res[2].replace(',', '.'))\r\n\r\n        def valve_calculation(normal_density, temperature, p1, p2):\r\n\r\n            # этот кусок кода нужен, чтобы найти плотность газа при нормальных условиях\r\n            p1 = (p1 + 0.101325) * 1000000 / 98100\r\n            p2 = (p2 + 0.101325) * 1000000 / 98100\r\n            dp = p1 - p2\r\n            temperature += 273.15\r\n            if btn1.cget('text') == 'Расчёт пропускной способности':\r\n                g = normal_density * float(res[3].replace(',', '.'))\r\n                if dp < p1 / 2:\r\n                    kv = g / 529 * (temperature / dp / p2 / normal_density) ** 0.5\r\n                else:\r\n                    kv = g / 265 / p1 * (temperature / normal_density) ** 0.5\r\n                cur.execute(\"\"\"SELECT name, link FROM pressure_regulators\r\n                                WHERE Kv>(?);\r\n                \"\"\", (kv*1.2,))\r\n                pressure_regulator = cur.fetchall()\r\n                print(f'Регуляторы {pressure_regulator}')\r\n                result = f'Требуемый Kv  {round(kv, 1)} м3/ч\\n' \\\r\n                         f'с учётом запаса {round(kv * 1.2, 1)} - {round(kv * 1.5, 1)}\\n' \\\r\n                         f'\\nРегуляторы\\n{pressure_regulator}\\n'\r\n\r\n            elif btn1.cget('text') == 'Расчёт Kv':\r\n                kv = float(res[3].replace(',', '.'))\r\n                args = [temperature, kv, dp, p1, p2, normal_density]\r\n                if long_mode is True:\r\n                    result = f'{round(standard_conditions(*args)/1.2, 1)}\\n'\r\n                else:\r\n                    result = f'Пропускная способность {round(mass_rate(*args), 1)} кг/ч \\n' \\\r\n                         f'{round(normal_conditions(*args), 1)} нм3/ч \\n' \\\r\n                         f'{round(standard_conditions(*args), 1)} ст. м3/ч\\n' \\\r\n                         f'С учётом запаса - {round(standard_conditions(*args)/1.5, 1)} - ' \\\r\n                         f'{round(standard_conditions(*args)/1.2, 1)} ст. м3/ч\\n'\r\n\r\n\r\n            txtwin.insert(INSERT, result)\r\n\r\n\r\n        long_mode = False\r\n        if long_mode is True:\r\n            while p1 <= design_pressure:\r\n                valve_calculation(normal_density, temperature, p1, p2)\r\n        else:\r\n            valve_calculation(normal_density, temperature, p1, p2)\r\n\r\n\r\n    def mass_rate(temperature, kv, dp, p1, p2, gas_density):\r\n        if dp < p1 / 2:\r\n            return (529 / temperature) * kv * (dp * p2 * gas_density * temperature) ** 0.5\r\n        else:\r\n            return 265 * p1 * kv * (gas_density / temperature) ** 0.5\r\n\r\n\r\n    def normal_conditions(temperature, kv, dp, p1, p2, gas_density):\r\n        return mass_rate(temperature, kv, dp, p1, p2, gas_density) / gas_density\r\n\r\n\r\n    def standard_conditions(temperature, kv, dp, p1, p2, gas_density):\r\n        return normal_conditions(temperature, kv, dp, p1, p2, gas_density) * 293.15 / 273.15\r\n\r\n\r\n    valve_root = Tk()\r\n    valve_root.geometry(\"1920x1080\")\r\n    valve_root.title('Расчёт пропускной способности клапанов ')\r\n\r\n    manual_input = ['Давление до клапана, МПа', 'Давление после клапана, МПа', 'Температура, °С', 'Kv, м3/ч']\r\n\r\n    lbl = []\r\n    txt = []\r\n\r\n    for i in range(len(manual_input)):\r\n        lbl.append(Label(valve_root, text=manual_input[i], font=(\"Arial Bold\", 14)))\r\n        lbl[i].grid(column=100, row=700 + 100 * i)\r\n\r\n        entry = Entry(valve_root, width=10, justify='center')\r\n        entry.grid(column=110, row=700 + 100 * i)\r\n        txt.append(entry)\r\n\r\n    txtwin = scrolledtext.ScrolledText(valve_root, width=80, height=30, bg=\"darkgreen\", fg='white')\r\n    txtwin.grid(column=10, row=10)\r\n\r\n\r\n    combo = Combobox(valve_root)\r\n    combo['values'] = get_grs_name()\r\n    combo.current(0)\r\n    combo.grid(column=300, row=0)\r\n    \"\"\"при каждой смене ГРС, будет происходить инициализация нового газа, чтобы не проводить её тысячи раз\"\"\"\r\n    def gas_init(event):\r\n        gas = Gas(get_composition(combo.get()), 0, 0)\r\n        return gas.normal_density\r\n    normal_density = Gas(get_composition(combo.get()), 0, 0).normal_density\r\n    combo.bind(\"<<ComboboxSelected>>\", gas_init)\r\n\r\n    btn = Button(valve_root, text='Выполнить расчёт', font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\", command=calc)\r\n    btn.grid(column=600, row=100)\r\n    btn1 = Button(valve_root, text='Расчёт Kv', font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\", command=shift)\r\n    btn1.grid(column=600, row=200)\r\n    #btn2 = Button(valve_root, text='Полный расчёт', font=(\"Arial Bold\", 10), bg=\"blue\", fg=\"white\", command=long_calc)\r\n    #btn2.grid(column=700, row=200)\r\n\r\n    valve_root.bind('<Return>', calc)\r\n\r\n    valve_root.mainloop()\r\n    return\r\n\r\n\r\n# ОКНО --- Расчёт предохранительных клапанов ГРС\r\n\"\"\"код рассчитывает пропускную спобосность СППК для ГРС ориентировочно\"\"\"\r\ndef ppk_calc():\r\n\r\n    def shift():\r\n        if btn1.cget('text') == 'Расчёт седла':\r\n            lbl[3].config(text='Площадь седла, мм2')\r\n            btn1.config(text='Площадь седла')\r\n        else:\r\n            lbl[3].config(text='Расход газа, ст. м3/ч')\r\n            btn1.config(text='Расчёт седла')\r\n\r\n\r\n    def clean():\r\n        txtwin.delete(1.0, END)  # чистит окно вывода\r\n\r\n    def calc(event=None):\r\n        global result\r\n        clean()\r\n\r\n\r\n        res = [format(data.get()) for data in txt]\r\n        if '' in res:\r\n            result = ('!!!Введите исходные данные!!!\\n')\r\n            txtwin.insert(INSERT, result)\r\n            return\r\n\r\n        chois = get_composition(combo.get())\r\n\r\n        p1 = float(res[0].replace(',', '.'))            #давление до клапана\r\n        temperature = float(res[1].replace(',', '.'))   #температура до клапана\r\n        alpha = float(res[2].replace(',', '.'))         # коэфф. расхода\r\n        rate = float(res[3].replace(',', '.'))          #расход газа в ст. м3/ч\r\n\r\n        gas = Gas(chois, temperature, p1, rate)\r\n\r\n        temperature += 273.15\r\n\r\n        # этот кусок кода нужен, чтобы найти плотность газа при нормальных условиях\r\n\r\n        print(f'Плотность газа составляет {round(gas.normal_density, 4)} кг/м3')\r\n        k = 1.30 #адиабат. коэффициент для метана\r\n        b3 = 1.59 * ((k / (k + 1)) ** 0.5) * ((2 / (k + 1)) ** (1 / (k - 1))) #расчёт b3\r\n        if btn1.cget('text') == 'Расчёт седла':\r\n            f_area = gas.standard_density * float(res[3].replace(',', '.')) / alpha / b3 / 3.16 / (((p1 + 0.1) * gas.actual_density)**0.5)\r\n            result = f'Требуемая площадь седла  {round(f_area, 1)} мм2\\n'\r\n        elif btn1.cget('text') == 'Площадь седла':\r\n            f_area = float(res[3].replace(',', '.'))\r\n            args = [gas, alpha, f_area, p1]\r\n            result = f'Пропускная способность ППК с седлом {f_area} мм2\\n'\\\r\n                     f' {round(mass_rate(*args), 1)} кг/ч \\n' \\\r\n                     f'{round(normal_conditions(*args), 1)} нм3/ч \\n' \\\r\n                     f'{round(standard_conditions(*args), 1)} ст. м3/ч\\n'\r\n\r\n        txtwin.insert(INSERT, result)\r\n\r\n    def mass_rate(gas, alpha, f_area, p1):\r\n        k = 1.30 #адиабат. коэффициент для метана\r\n        b3 = 1.59 * ((k / (k + 1)) ** 0.5) * ((2 / (k + 1)) ** (1 / (k - 1))) #расчёт b3\r\n\r\n        return 3.16 * b3 * alpha * f_area * ((p1 + 0.1) * gas.actual_density) ** 0.5\r\n\r\n    def normal_conditions(gas, alpha, f_area, p1):\r\n        return mass_rate(gas, alpha, f_area, p1) / gas.normal_density\r\n\r\n    def standard_conditions(gas, alpha, f_area, p1):\r\n        return normal_conditions(gas, alpha, f_area, p1) * 293.15 / 273.15\r\n\r\n    ppk_root = Tk()\r\n    ppk_root.geometry(\"1920x1080\")\r\n    ppk_root.title('Расчёт предохранительных клапанов ГРС ')\r\n\r\n    manual_input = ['Давление до клапана, МПа', 'Температура, °С', 'Альфа', 'Расход газа, ст. м3/ч']\r\n\r\n    lbl = []\r\n    txt = []\r\n\r\n    for i in range(len(manual_input)):\r\n        lbl.append(Label(ppk_root, text=manual_input[i], font=(\"Arial Bold\", 14)))\r\n        lbl[i].grid(column=100, row=700 + 100 * i)\r\n\r\n        entry = Entry(ppk_root, width=10, justify='center')\r\n        entry.grid(column=110, row=700 + 100 * i)\r\n        txt.append(entry)\r\n\r\n    txtwin = scrolledtext.ScrolledText(ppk_root, width=60, height=10, bg=\"darkgreen\", fg='white')\r\n    txtwin.grid(column=10, row=10)\r\n\r\n    combo = Combobox(ppk_root)\r\n    combo['values'] = get_grs_name()\r\n    combo.current(0)\r\n    combo.grid(column=300, row=0)\r\n\r\n    btn = Button(ppk_root, text='Выполнить расчёт', font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\", command=calc)\r\n    btn.grid(column=600, row=100)\r\n    btn1 = Button(ppk_root, text='Расчёт седла', font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\", command=shift)\r\n    btn1.grid(column=600, row=200)\r\n    btn2 = Button(ppk_root, text='Очистить окно', font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\", command=clean)\r\n    btn2.grid(column=600, row=300)\r\n\r\n\r\n    ppk_root.bind('<Return>', calc)\r\n\r\n    ppk_root.mainloop()\r\n    return\r\n\r\n\r\n# ОКНО --- Теплотехнический расчёт, подбор подогревателя газа\r\ndef gas_heat_calc():\r\n    heat_root = Tk()\r\n    heat_root.geometry(\"1920x1080\")\r\n    heat_root.title('Теплотехнический расчёт, подбор подогревателя газа ')\r\n\r\n    def clean():\r\n        txtwin.delete(1.0, END)  # чистит окно вывода\r\n\r\n    def calc():\r\n        \"\"\"Начнём расчет с нахождения теплоёмкости газа\"\"\"\r\n        clean()\r\n        chois = get_composition(combo.get())\r\n        result = (f'\\nЗапуск расчёта ГРС {format(combo.get())}\\n')\r\n        txtwin.insert(INSERT, result)\r\n        res = [format(data.get()) for data in txt]\r\n\r\n        rate = float(res[0].replace(',', '.'))\r\n        inlet_pressure = float(res[1].replace(',', '.'))\r\n        outlet_pressure = float(res[2].replace(',', '.'))\r\n        inlet_temperature = float(res[3].replace(',', '.'))\r\n        grs_pressure_drop = inlet_pressure - outlet_pressure\r\n        outlet_temperature_limit = float(res[4].replace(',', '.'))\r\n\r\n        interpolation_coefficient = [-0.06945, -6.3116, 0.0821]  # эти коэффициенты ты получил интерполяцией ВНИИМБ и ТОПКИ и нашел среднее значение перепада температур в заданном диапазоне\r\n\r\n        outlet_temperature = inlet_temperature + interpolation_coefficient[0] * grs_pressure_drop**2 + interpolation_coefficient[1] * grs_pressure_drop + interpolation_coefficient[2]\r\n\r\n        if outlet_temperature > outlet_temperature_limit:\r\n            outlet_temperature_limit = outlet_temperature\r\n\r\n\r\n        inlet_gas = Gas(chois, inlet_temperature, inlet_pressure, rate)\r\n        outlet_gas_limit = Gas(chois, outlet_temperature_limit, outlet_pressure, rate)\r\n        outlet_gas = Gas(chois, outlet_temperature, outlet_pressure, rate)\r\n\r\n        print(inlet_gas.heat_stream)\r\n        print(outlet_gas.heat_stream)\r\n\r\n        heaters = {'ГПМ-ПТПГ-5': 170, 'ГПМ-ПТПГ-10': 300, 'ГПМ-ПТПГ-15М': 500, 'ГПМ-ПТПГ-30М': 1080, 'ГПМ-ПТПГ-100':2700} #это просто каталог доступных подогревателей\r\n        heat_power = (outlet_gas_limit.heat_stream - outlet_gas.heat_stream) / 3600 / 1000\r\n\r\n        heater_chois = None\r\n\r\n        if outlet_temperature_limit == outlet_temperature:\r\n            heater_chois = \"\\nПодогреватель газа не требуется!\\n\"\r\n        else:\r\n            for heater, power in heaters.items():\r\n                print(f'мощность {heater} {power} кВт, а надо {round(heat_power, 2)}')\r\n                if power >= heat_power:\r\n                    heater_chois = f'\\nПодобран подогреватель {heater}\\n'\r\n                    print(heater_chois)\r\n                    break\r\n            if heater_chois == None:\r\n                heater_chois = ' афигенной мощности'\r\n\r\n        \"\"\"исходные данные для расчёта\"\"\"\r\n\r\n        txtwin.insert(INSERT,\r\n                      f'\\nРасход газа {inlet_gas.rate} ст. м3/ч\\n'\r\n                        f'Давление газа на входе ГРС {round((inlet_gas.pressure-101325)/1000000, 2)} МПа\\n'\r\n                        f'Температура газа на входе ГРС {round(inlet_gas.temperature-273.15, 2)} °C\\n'\r\n                        f'Давление газа на выходе с ГРС {round((outlet_gas.pressure-101325)/1000000, 2)} МПа\\n'\r\n                        f'Температура газа на выходе с ГРС без подогрева {round(outlet_gas.temperature-273.15, 2)} °C\\n'\r\n                        f'Температура газа на выходе с ГРС не ниже {outlet_temperature_limit} °С\\n')\r\n\r\n        txtwin.insert(INSERT,\r\n                      f'\\nМолярная масса газа - {round(inlet_gas.molecular_mass, 2)} кг/кмоль\\n'\r\n                           f'Молярный объём  {round(inlet_gas.molecular_mass / inlet_gas.standard_density, 2)} м3/кмоль\\n'\r\n                           f'Массовый расход газа {round(inlet_gas.mass_flow, 1)} кг/ч\\n'\r\n                           f'Теплоёмкость газа на входе {round(inlet_gas.specific_heat/1000, 3)} кДж/кг °C\\n'\r\n                           f'Теплоёмкость газа на выходе {round(outlet_gas.specific_heat/1000, 3)} кДж/кг °C\\n')\r\n\r\n        result = (f'Температура газа на выходе ГРС без подогрева газа {round(outlet_temperature, 2)} °С\\n'\r\n                  f'требуемая мощность подогревателя  {round(heat_power, 1)} кВт \\n'\r\n                  f'{heater_chois}')\r\n\r\n        txtwin.insert(INSERT, result)\r\n\r\n    manual_input = ['Расход газа, ст. м3/ч',\r\n                    'Давление на входе ГРС, МПа',\r\n                    'Давление на выходе ГРС, МПа',\r\n                    'Температура газа на входе ГРС, °С',\r\n                    'Минимальная тем-ра на выходе, °С']\r\n\r\n    lbl = []\r\n    txt = []\r\n\r\n    for i in range(len(manual_input)):\r\n        lbl.append(Label(heat_root, text=manual_input[i], font=(\"Arial Bold\", 14)))\r\n        lbl[i].grid(column=100, row=700 + 100 * i)\r\n\r\n        entry = Entry(heat_root, width=10, justify='center')\r\n        entry.grid(column=110, row=700 + 100 * i)\r\n        txt.append(entry)\r\n\r\n    #entry[4].set(str(-10))\r\n\r\n    txtwin = scrolledtext.ScrolledText(heat_root, width=70, height=30, bg=\"darkgreen\", fg='white')\r\n    txtwin.grid(column=10, row=10)\r\n\r\n    combo = Combobox(heat_root)\r\n    combo['values'] = get_grs_name()\r\n    combo.current(0)\r\n    combo.grid(column=300, row=0)\r\n\r\n    interface_buttons = ['Расчёт', 'Очистить окно']\r\n    calc_list = [calc, clean]\r\n\r\n    for i in range(len(interface_buttons)):\r\n        btn = Button(heat_root, text=interface_buttons[i], font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\",\r\n                     command=calc_list[i])\r\n        btn.grid(column=600, row=100 + 100 * i)\r\n\r\n    heat_root.mainloop()\r\n    return\r\n\r\n\r\ndef pipeshell_calc():\r\n    return\r\n\r\n\r\ndef stat_grs():\r\n    grs_stat.make_stat_root()\r\n\r\n\r\n# ОКНО --- Секции ГРС для расчёта\r\ndef insert_tvps_section():\r\n    root = Tk()\r\n    root.geometry('800x600')\r\n    root.title('Секции ГРС для расчёта')\r\n\r\n    grs_cmb = Combobox(root, width=30)\r\n    grs_cmb.pack()\r\n    grs_cmb['value'] = get_grs_name()\r\n    grs_cmb.current(0)\r\n\r\n    block_cmb = Combobox(root, width=30)\r\n    block_cmb.pack(pady=5)\r\n    block_cmb['values'] = get_column_data(column_name='name_block', table='blocks', name_grs=grs_cmb.get())\r\n    block_cmb.current(0)\r\n\r\n    \"\"\"обработчик событий, вытаскивает все существующие блоки из выбранной на данный момент ГРС\"\"\"\r\n    def block_cmb_event(event):\r\n        block_cmb['values'] = get_column_data(column_name='name_block', table='blocks', name_grs=grs_cmb.get())\r\n        block_cmb.current(0)\r\n    grs_cmb.bind(\"<<ComboboxSelected>>\", block_cmb_event)\r\n\r\n    data_list = ['Наименование участка', 'Наружний диаметр трубопровода', 'Толщина стенки',\r\n                 'Перепад давления, кПа']\r\n    ent = [Entry(root) for data in data_list]\r\n    lbl = [Label(root, text=data) for data in data_list]\r\n    for i in range(len(ent)):\r\n        lbl[i].pack()\r\n        ent[i].pack(pady=5)\r\n    \"\"\"функция вставляет секцию для расчёта ТВПС ГРС\"\"\"\r\n    def insert():\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n\r\n        section = ent[0].get()\r\n        diameter = int(ent[1].get())\r\n        wall = int(ent[2].get())\r\n        if ent[3].get() == '':\r\n            pressure_drop = 0\r\n        else:\r\n            pressure_drop = float(ent[3].get())\r\n\r\n        cur.execute(f\"\"\"INSERT INTO tvps(block_id,  section_name, pipe_diameter, wall, internal_diameter, pressure_drop)\r\n                    VALUES(\r\n                    (SELECT block_id FROM blocks WHERE grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}') \r\n                    AND name_block = '{block_cmb.get()}'),\r\n                    '{section}',\r\n                    {diameter},\r\n                    {wall},\r\n                    {diameter - 2 * wall}, \r\n                    {pressure_drop});\"\"\")\r\n        connection.commit()\r\n        connection.close()\r\n\r\n    insert_btn = Button(root, text='Вставить секцию', bg='green', fg='black', command=insert)\r\n    insert_btn.pack(pady=10)\r\n\r\n    root.mainloop()\r\n\r\n\r\ndef get_range(start, stop, step):\r\n    if step == 0:\r\n        print(\"Нулевой шаг детектед!\")\r\n        pass\r\n    else:\r\n        i = start\r\n        while i <= stop:\r\n            yield i\r\n            i += step\r\n\r\n\r\n\"\"\"функция решения СЛАУ методом релаксации, пригодится в дальнейшем, когда появятся СЛАУ\"\"\"\r\ndef relaxation(coefficients, constants, initial_guess, relaxation_factor, tolerance=1e-6, max_iterations=100):\r\n    n = len(coefficients)\r\n    x = initial_guess #вот этот кусок не нравится, каждый раз вводить изначальный список начальных приближений\r\n    x_new = [0, 0, 0]\r\n\r\n    for _ in range(max_iterations):\r\n        for i in range(n):\r\n            sigma = 0\r\n            for j in range(n):\r\n                if j != i:\r\n                    sigma += coefficients[i][j] * x_new[j]\r\n            x_new[i] = (1 - relaxation_factor) * x[i] + (relaxation_factor / coefficients[i][i]) * (constants[i] - sigma)\r\n        if sum([((q - p) ** 2) for q, p in zip(x, x_new)]) ** 0.5 < tolerance:\r\n            print('Нужная точность достигнута')\r\n            return [round(elem, int(- math.log(tolerance, 10))) for elem in x_new]\r\n        x = x_new.copy()\r\n    print('Максимальное количество итераций достигнуто')\r\n    return [round(elem, int(- math.log(tolerance, 10))) for elem in x_new]\r\n\r\n\r\n# ОКНО --- Расчёт ТВПС\r\ndef tvps_calc():\r\n    database_path = 'grs_database.db'\r\n\r\n    root = Tk()\r\n    root.geometry('1920x1080')\r\n    root.title('Расчёт ТВПС')\r\n\r\n    grs_cmb = Combobox(root, width=30)\r\n    grs_cmb.grid(column=0, row=0)\r\n    grs_cmb['value'] = get_grs_name()\r\n    grs_cmb.current(0)\r\n\r\n    connection = sqlite3.connect(database_path)\r\n    cur = connection.cursor()\r\n\r\n    section_cmb = Combobox(root, width=40)\r\n    section_cmb.grid(column=0, row=100)\r\n    cur.execute(f\"\"\"SELECT section_name FROM tvps WHERE block_id IN (\r\n    SELECT block_id FROM blocks WHERE grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}'))\"\"\")\r\n    sections = [data[0] for data in cur.fetchall()]\r\n    section_cmb['values'] = sections\r\n    if len(section_cmb['values']) != 0:\r\n        section_cmb.current(0)\r\n    else:\r\n        section_cmb.set('СЕКЦИИ НЕ ВСТАВЛЕНЫ!')\r\n\r\n    def on_combobox_select(event):\r\n        connection = sqlite3.connect(database_path)\r\n        cur = connection.cursor()\r\n        cur.execute(f\"\"\"SELECT section_name FROM tvps WHERE block_id IN (\r\n    SELECT block_id FROM blocks WHERE grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}'))\"\"\")\r\n        sections = [data[0] for data in cur.fetchall()]\r\n        section_cmb['values'] = sections\r\n        if len(section_cmb['values']) != 0:\r\n            section_cmb.current(0)\r\n        else:\r\n            section_cmb.set('СЕКЦИИ НЕ ВСТАВЛЕНЫ!')\r\n\r\n    grs_cmb.bind('<<ComboboxSelected>>', on_combobox_select)\r\n\r\n\r\n    manual_input = ['Минимальное давление', 'Максимальное давление',\r\n                    'Шаг по давлению', 'Минимальная температура',\r\n                    'Максимальная температура', 'Число точек по температуре', 'Масштаб подписей данных']\r\n\r\n    lbl = []\r\n    txt = []\r\n\r\n    for i in range(len(manual_input)):\r\n        lbl.append(Label(root, text=manual_input[i], font=(\"Arial Bold\", 14)))\r\n        lbl[i].grid(column=500, row=100 * i)\r\n\r\n        entry = Entry(root, width=10, justify='center')\r\n        entry.grid(column=600, row=100 * i)\r\n        txt.append(entry)\r\n\r\n    def calc():\r\n\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n\r\n        res = [float(format(data.get().replace(',', '.'))) for data in txt[:6]]\r\n        pressures = list(get_range(*res[:3]))\r\n        res[5] = (res[4] - res[3]) / res[5]\r\n        temperatures = list(get_range(*res[3:]))\r\n\r\n        cur.execute(f\"\"\"DELETE FROM tvps_db WHERE grs_name = '{grs_cmb.get()}' AND description = '{section_cmb.get()}'\"\"\")\r\n        connection.commit()\r\n\r\n        cur.execute(f\"\"\"SELECT capacity_after FROM grs WHERE name_grs = '{grs_cmb.get()}';\"\"\")\r\n        rate = float(cur.fetchone()[0])\r\n\r\n        composition = get_composition(grs_cmb.get())\r\n        cur.execute(f\"\"\"SELECT section_name, pipe_diameter, wall, internal_diameter, pressure, temperature,\r\n                capacity, description FROM tvps\r\n                WHERE block_id IN (SELECT block_id FROM blocks WHERE \r\n                grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}')) \"\"\")\r\n        number = len(pressures) * len(temperatures)\r\n        print(f'Количество точек {number}, расчётное время расчёта {number * 0.3 / 60} минут')\r\n        gas = Gas(composition, temperatures[0], pressures[0], rate)\r\n        cur.execute(f\"\"\"SELECT pipe_diameter, wall FROM tvps\r\n                WHERE section_name = '{section_cmb.get()}' AND (block_id IN (\r\n                SELECT block_id FROM blocks WHERE grs_id = (\r\n                SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}')));\"\"\")\r\n        pipe = Pipeline(*list(cur.fetchone()))\r\n        count = 0\r\n        if 'Обводн' in section_cmb.get():\r\n            print('Замечаем, что это обводная линия байпаса')\r\n            speed_limit = 50\r\n        elif 'обводн' in section_cmb.get():\r\n                print('Замечаем, что это обводная линия байпаса')\r\n                speed_limit = 50\r\n        else:\r\n            print('Замечаем, что это основная линия')\r\n            speed_limit = 25\r\n        for pressure in pressures:\r\n            for temperature in temperatures:\r\n                try:\r\n                    actual_rate = gas.get_actual_rate(temperature, pressure)\r\n                    tvps = round(speed_limit * rate / (actual_rate / 3600 / pipe.area))\r\n                except ValueError:\r\n                    print('ПРИБЛИЗИТЕЛЬНЫЙ РАСЧЁТ ПО уравнению регрессии')\r\n                    koeff = 273.15 / (temperature + 273.15) * pipe.area / Pipeline(219, 8).area\r\n                    tvps = round((1095.809670 * pressure ** 2 + 30035.230172 * pressure + 4084.938735) * koeff * speed_limit / 25)\r\n\r\n                print(f'Давление {pressure} МПа;\\n'\r\n                      f'Температура {temperature}°C\\n'\r\n                      f'Скорость {actual_rate / 3600 / pipe.area}\\n'\r\n                      f'ТВПС {tvps}')\r\n\r\n                cur.execute(f\"\"\"INSERT INTO tvps_db(grs_name, description, pressure, \r\n                    temperature, pipe_diameter, wall, tvps)\r\n                    VALUES('{grs_cmb.get()}', '{section_cmb.get()}', {pressure}, \r\n                    {temperature}, {pipe.diameter}, {pipe.wall}, {tvps}\r\n                    )\"\"\")\r\n                connection.commit()\r\n                count += 1\r\n                progress = f'Прогресс {round(100 * count / number, 2)} %\\n'\r\n                print(progress)\r\n        connection.close()\r\n\r\n\r\n    def draw_plot():\r\n        \"\"\"считываем базу данных\"\"\"\r\n        try:\r\n            min_pressure = float(format(txt[0].get().replace(',', '.')))\r\n            max_pressure = float(format(txt[1].get().replace(',', '.')))\r\n        except ValueError:\r\n            min_pressure = 0\r\n            max_pressure = 1000\r\n\r\n        try:\r\n            plot_text_scale = float(format(txt[6].get().replace(',', '.')))\r\n        except ValueError:\r\n            plot_text_scale = 10\r\n        connection = sqlite3.connect(database_path)\r\n        query_max_t = f\"\"\"SELECT pipe_diameter AS 'Диаметр', wall AS 'Стенка', \r\n        pressure AS 'Давление', temperature AS 'Температура', tvps AS 'ТВПС'\r\n        FROM tvps_db WHERE grs_name = '{grs_cmb.get()}' AND description = '{section_cmb.get()}';\"\"\"\r\n\r\n        main_df = pd.read_sql(query_max_t, connection)\r\n\r\n\r\n\r\n        max_temperature = main_df['Температура'].max()\r\n        min_temperature = main_df['Температура'].min()\r\n\r\n        main_df = main_df.loc[main_df['Давление'] > min_pressure, ['Давление', 'Температура', 'ТВПС']]\r\n        main_df = main_df.loc[main_df['Давление'] < max_pressure, ['Давление', 'Температура', 'ТВПС']]\r\n\r\n        main_df.sort_values(by=['ТВПС'])\r\n\r\n        df = main_df.loc[main_df['Температура'] == max_temperature, ['Давление', 'ТВПС']]\r\n\r\n        plt.figure(figsize=(16, 8))\r\n\r\n        #plt.plot(df_try['Давление'], df_try['ТВПС'], marker='o', linestyle='-', color='green', markersize=3)\r\n\r\n        plt.plot(df['Давление'], df['ТВПС'], marker='o', linestyle='-', color='red', markersize=3,\r\n                 label=f'При температуре газа {round(max_temperature)}°C')\r\n        num_labels = 12\r\n        for i, (x, y) in enumerate(zip(df['Давление'], df['ТВПС'])):\r\n            try:\r\n                if i % (len(df['Давление']) // num_labels) == 0:\r\n                    plt.text(x, y - df['ТВПС'].max() / plot_text_scale, y)\r\n            except ZeroDivisionError:\r\n                num_labels -= 1\r\n\r\n        df = main_df.loc[main_df['Температура'] == min_temperature, ['Давление', 'ТВПС']]\r\n        plt.plot(df['Давление'], df['ТВПС'], marker='o', linestyle='-', color='blue', markersize=3,\r\n                 label=f'При температуре газа {round(min_temperature)}°C')\r\n\r\n        for i, (x, y) in enumerate(zip(df['Давление'], df['ТВПС'])):\r\n            if i % (len(df['Давление']) // num_labels) == 0:\r\n                plt.text(x, y + df['ТВПС'].max() / plot_text_scale, y)\r\n\r\n\r\n        plt.legend()\r\n        plt.xlabel('Давление, МПа')\r\n        plt.ylabel('ТВПС, ст м3/ч')\r\n        plt.title(f'ТВПС ГРС {grs_cmb.get()}, {section_cmb.get()}')\r\n        plt.grid(linewidth=1, linestyle='-', color='grey')\r\n        plt.show()\r\n\r\n\r\n    def view_data():\r\n        connection = sqlite3.connect('grs_database.db')\r\n        cur = connection.cursor()\r\n        view_window = Toplevel(root)\r\n        view_window.title('Таблица ТВПС')\r\n\r\n        treeview = ttk.Treeview(view_window)\r\n        treeview.pack()\r\n\r\n        treeview[\"columns\"] = (\"section_name\", \"pipe_diameter\", \"wall\",\r\n                               \"internal_diameter\", \"pressure\", \"temperature\",\r\n                               \"capacity\", \"description\")\r\n        headings = (\"Участок трубопровода, мм\", \"Диаметр трубопровода, мм\", \"Толщина стенки, мм\",\r\n                               \"Внутренний диаметр, мм\", \"Давление, МПа (изб.)\", \"Температура, °С\",\r\n                               \"ТВПС, ст. м3/ч\", \"Комментарий\")\r\n        width_list = [10 * len([letter for letter in word]) for word in headings]\r\n        treeview.column(\"#0\", width=0, stretch=NO)\r\n        for i in range(len(treeview[\"columns\"])):\r\n            treeview.column(treeview[\"columns\"][i], anchor=N, width=width_list[i])\r\n        treeview.heading(\"#0\", text=\"\")\r\n        [treeview.heading(data, text=heading) for data, heading in dict(zip(treeview[\"columns\"], headings)).items()]\r\n\r\n        cur.execute(f\"\"\"SELECT section_name, pipe_diameter, wall, internal_diameter, pressure, temperature,\r\n        capacity, description FROM tvps\r\n                WHERE block_id IN (SELECT block_id FROM blocks WHERE \r\n                grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}')) \"\"\")\r\n        rows = cur.fetchall()\r\n\r\n        for row in rows:\r\n            treeview.insert(\"\", END, text=\"\", values=row)\r\n\r\n        connection.close()\r\n\r\n    def show_tvps():\r\n\r\n        txtwin.delete(1.0, END)\r\n\r\n        connection = sqlite3.connect(database_path)\r\n        cur = connection.cursor()\r\n\r\n        inlet_pressures = [1.75, 2.93, 3.00, 3.81, 5.39]\r\n        temperatures = [1, 17]\r\n        for pressure in inlet_pressures:\r\n            \"\"\"Жесть тут порнография конечно, но я очень спешу, некогда нормально задуматься как делать\"\"\"\r\n            if section_cmb.get() == 'От фильтров Ф2.1,2':\r\n                pressure -= 0.01\r\n            elif section_cmb.get() == 'От подогревателя ПГА-200':\r\n                pressure -= 0.11\r\n            elif section_cmb.get() == 'Байпас мимо подогревателя':\r\n                pressure -= 0.11\r\n            elif section_cmb.get() == 'После СГ5.1':\r\n                pressure -= 0.18\r\n            elif section_cmb.get() == 'После СГ5.2':\r\n                pressure -= 0.18\r\n            elif section_cmb.get() == 'Высокая сторона л. редуц. Выход 1,2':\r\n                pressure -= 0.18\r\n            elif section_cmb.get() == 'Обвязка нового ПТПГ-15М':\r\n                pressure -= 0.11\r\n            elif section_cmb.get() == 'Высокая сторона л. ред. после ТП':\r\n                pressure -= 0.18\r\n\r\n\r\n            for temperature in temperatures:\r\n\r\n                print(pressure, temperature)\r\n\r\n\r\n                cur.execute(f\"\"\"SELECT description, pressure as 'Давление, МПа (изб.)', temperature as 'Температура, °С', \r\n                            MIN(tvps) as 'ТВПС, ст. м3/ч' FROM tvps_db\r\n                            WHERE round(pressure, 2) = {round(pressure, 2)} \r\n                            AND round(temperature, 2)  = {round(temperature, 2)}\r\n                            AND grs_name = '{grs_cmb.get()}'\r\n                            AND description  = '{section_cmb.get()}'\r\n                            GROUP BY description\r\n                            ORDER BY pressure, tvps;\"\"\")\r\n                try:\r\n                    query_result = list(cur.fetchone())\r\n                except TypeError:\r\n                    print(f\"\"\"SELECT description, pressure as 'Давление, МПа (изб.)', temperature as 'Температура, °С', \r\n                            MIN(tvps) as 'ТВПС, ст. м3/ч' FROM tvps_db\r\n                            WHERE round(pressure, 2) = {pressure} \r\n                            AND round(temperature, 2)  = {temperature}\r\n                            AND grs_name = '{grs_cmb.get()}'\r\n                            AND description  = '{section_cmb.get()}'\r\n                            GROUP BY description\r\n                            ORDER BY pressure, tvps;\"\"\")\r\n                text_list = ['Секция', 'Давление, МПа','Температура, °С', 'ТВПС, ст м3/ч']\r\n\r\n                result = dict(zip(text_list, query_result))\r\n                #result = [round(data, 2) for data in result[1:]].append(section)\r\n                print(result)\r\n\r\n                text = f\"\"\" Давление {round(pressure, 2)}, темп. {temperature} ТВПС {result['ТВПС, ст м3/ч']} ст. м3/ч\\n\"\"\"\r\n\r\n                txtwin.insert(INSERT, text)\r\n\r\n\r\n    treeview_btn = Button(root, text=\"Таблица\", command=view_data, fg='white', bg='black')\r\n    treeview_btn.grid(column=0, row=1000)\r\n\r\n    insert_tvps_section_btn = Button(root, text='Вставить секцию ТВПС', command=insert_tvps_section, fg='white', bg='green')\r\n    insert_tvps_section_btn.grid(column=0, row=1100)\r\n\r\n    calc_btn = Button(root, text=\"Расчёт\", command=calc, fg='white', bg='black')\r\n    calc_btn.grid(column=300, row=1200)\r\n\r\n    plot_btn = Button(root, text='График ТВПС', command=draw_plot, fg='white', bg='blue')\r\n    plot_btn.grid(column=0, row=1300)\r\n\r\n    show_tvps_btn = Button(root, text=\"Показать ТВПС\", command=show_tvps, fg='black', bg='pink')\r\n    show_tvps_btn.grid(column=0, row=1400)\r\n\r\n    txtwin = scrolledtext.ScrolledText(root, width=140, height=10, bg=\"darkgreen\", fg='white')\r\n    txtwin.grid(column=10, row=10)\r\n\r\n    root.mainloop()\r\n    pass\r\n\r\n\r\n# ОСНОВНОЕ ОКНО\r\ndef main_window():\r\n    interface_buttons = ['Скорости в трубопроводах', 'Ёмкость одоранта', 'Пропускная способность клапанов',\r\n                         'Расчёт подогревателя газа', 'Расчёт ППК', 'Толщина стенок трубопроводов', 'Схема',\r\n                         'Статистика', 'База данных ГРС', 'Расчёт ТВПС']\r\n    calc_windows = [veloсity_calc, odorant_calc, valve_calc,\r\n                    gas_heat_calc, ppk_calc, pipe_wall_root,\r\n                    pipe_draw, stat_grs, grs_data, tvps_calc]\r\n    root = Tk()\r\n    root.geometry(\"450x180\")\r\n    root.title('НеВеста-ГРС')\r\n\r\n    row_number = int(len(interface_buttons) / 2)\r\n    for i in range(len(interface_buttons)):\r\n        btn = Button(root, text=interface_buttons[i], font=(\"Arial Bold\", 10), bg=\"green\", fg=\"black\",\r\n                     command=calc_windows[i])\r\n        if i < row_number:\r\n            btn.grid(column=100, row=i*100)\r\n        else:\r\n            btn.grid(column=300, row=i*100-100*row_number)\r\n    root.mainloop()\r\n\r\n\r\nmain_window()\r\n#insert_tvps_section()\r\ndef pressure_drop_calc():\r\n\r\n    # temperature = float(input('Введите температуру, С ').replace(',', '.'))\r\n    # pressure = float(input('Введите давление, МПа (изб) ').replace(',', '.'))\r\n    temperature = 0\r\n    pressure = 0.6\r\n    rate = 76000\r\n    # использовать словарь для определения состава довольно удобно\r\n\r\n    gas = Gas(get_composition(random.choice(get_grs_name())), temperature, pressure, rate)\r\n    print(gas.viscosity)\r\n    # тут собирается стринговый аругмент для работы модуля props\r\n    print(\r\n        f'Плотность газа при температуре {round(gas.temperature - 273.15, 2)} С  и давлении {round((gas.pressure - 101325) / 1e6, 2)} МПа, составила {round(gas.actual_density, 4)} кг/м3')\r\n    print(f'Плотность газа при нормальных условиях составила {round(gas.normal_density, 4)} кг/м3')\r\n    print(f'Плотность газа при стандартных условиях составила {round(gas.standard_density, 4)} кг/м3')\r\n    print(f'Теплоёмкость компонентов газа  {gas.component_specific_heat}')\r\n    print(f'Теплоёмкость  газа  {gas.specific_heat}')\r\n\r\n    \"\"\"делай всё это через базы данных SQL пожалста\"\"\"\r\n    # pipe_diameter = int(input('Введите внешний диаметр трубопровода, мм '))\r\n    # wall = int(input('Введите толщину стенки трубопровода, мм  '))\r\n    # pipe_diameter = [159, 159, 159, 108, 108, 159, 159, 159, 159, 159, 159, 219, 325, 325, 325, 325, 325]\r\n    # wall = [6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 10, 10, 10, 12, 10]\r\n    # pipe_lenght = [3.5, 3.4, 4.8, 1.7, 2.5, 0.6, 0.6, 1.0, 23.50, 1.3, 3.0, 0.8, 2.3, 30.50, 2.8, 1.2, 9.0]\r\n\r\n    pipe_diameter = 325\r\n    wall = 10\r\n    pipe_lenght = 10\r\n\r\n    pipe = Pipeline(pipe_diameter, wall, pipe_lenght)\r\n\r\n    # rate = float(input('Введите расход газа ст. м3/ч '))\r\n\r\n    actual_flow = gas.standard_density / gas.actual_density * rate\r\n    velosity = actual_flow / pipe.area / 3600\r\n\r\n    reynolds = velosity * pipe.internal_diameter / 1000 * gas.actual_density / gas.viscosity\r\n    print(f'Число Рейнольдса составило {round(reynolds, 1)}')\r\n    if reynolds > 10000:\r\n        darsi = 0.2579 / (reynolds ** 0.231)\r\n        print(f'коэффицент Дарси при турбулентом движении {round(darsi, 5)}')\r\n    else:\r\n        darsi = 64 / reynolds\r\n        print(f'невероятно, ламинарное течение, что за условия такие {darsi}')\r\n    pressure_drop = darsi * pipe_lenght / pipe_diameter * 1000 * velosity ** 2 * gas.actual_density / 2\r\n\r\n    # final_pressure = 1e6 * float(input('Введите конечное давление, МПа ').replace(',', '.')) + 101325\r\n    # gas.expansion(final_pressure)\r\n\r\n    # total_specific_heat = sum({key: (gas.specific_heat[key]*gas.mass_fraction[key]) for key in gas.composition}.values())\r\n    # print(total_specific_heat) #типа полная теплоёмкость газа\r\n    # print(gas.entalpy)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/grs_main.py b/core/grs_main.py
--- a/core/grs_main.py	(revision ac3036f97d966ff3a1bb8a72571c75e762b9a3a3)
+++ b/core/grs_main.py	(date 1724089776933)
@@ -1006,8 +1006,8 @@
     connection = sqlite3.connect(database_path)
     cur = connection.cursor()
 
-    section_cmb = Combobox(root, width=40)
-    section_cmb.grid(column=0, row=100)
+    section_cmb = Combobox(root, width=20)
+    section_cmb.grid(column=0, row=10)
     cur.execute(f"""SELECT section_name FROM tvps WHERE block_id IN (
     SELECT block_id FROM blocks WHERE grs_id = (SELECT grs_id FROM grs WHERE name_grs = '{grs_cmb.get()}'))""")
     sections = [data[0] for data in cur.fetchall()]
@@ -1288,7 +1288,7 @@
     show_tvps_btn = Button(root, text="Показать ТВПС", command=show_tvps, fg='black', bg='pink')
     show_tvps_btn.grid(column=0, row=1400)
 
-    txtwin = scrolledtext.ScrolledText(root, width=140, height=10, bg="darkgreen", fg='white')
+    txtwin = scrolledtext.ScrolledText(root, width=70, height=10, bg="darkgreen", fg='white')
     txtwin.grid(column=10, row=10)
 
     root.mainloop()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f607f56e-4ff3-4da4-83f7-2cd0ed8438d4\" name=\"Changes\" comment=\"Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source\">\r\n      <change afterPath=\"$PROJECT_DIR$/core/controller/ControllerInterface.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/core/model/functions/function_props.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/core/view/window_props.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/controller/Controller.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/controller/Controller.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/controller/MainMenuController.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/controller/PipeVelocityController.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/main.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/model/entity/Gas.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/model/entity/Gas.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/model/functions/PhysicFunctions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/model/functions/PhysicFunctions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/model/functions/UtilFunctions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/model/functions/UtilFunctions.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/view/GRSWindow.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/view/GRSWindow.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/core/view/Window.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/core/view/Window.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/guidata/texts.py\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/test/functions/PhysicFunctions.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test/functions/PhysicFunctions.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;AndrewDanie&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubDefaultAccount\">\r\n    <option name=\"defaultAccountId\" value=\"4b0fb413-7d43-4307-a727-dd18bd93e6c4\" />\r\n  </component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/AndrewDanie/NeVestaGRS.git&quot;,\r\n    &quot;accountId&quot;: &quot;4b0fb413-7d43-4307-a727-dd18bd93e6c4&quot;\r\n  },\r\n  &quot;recentNewPullRequestHead&quot;: {\r\n    &quot;server&quot;: {\r\n      &quot;useHttp&quot;: false,\r\n      &quot;host&quot;: &quot;github.com&quot;,\r\n      &quot;port&quot;: null,\r\n      &quot;suffix&quot;: null\r\n    },\r\n    &quot;owner&quot;: &quot;AndrewDanie&quot;,\r\n    &quot;repository&quot;: &quot;NeVestaGRS&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2kbS5lXM97mLkVvePb8v6kD8Jp5\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.PhysicFunctions (1).executor\": \"Run\",\r\n    \"Python.PhysicFunctions.executor\": \"Run\",\r\n    \"Python.PipeVelocityController.executor\": \"Run\",\r\n    \"Python.UtilFunctions.executor\": \"Run\",\r\n    \"Python.ValveSpeedController.executor\": \"Run\",\r\n    \"Python.Window.executor\": \"Run\",\r\n    \"Python.grs_interface.executor\": \"Run\",\r\n    \"Python.grs_main.executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"refactor\",\r\n    \"last_opened_file_path\": \"C:/Users/Идель/PycharmProjects/NeVestaGRS\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Андрей\\PycharmProjects\\NeVestaGRS\\core\\model\\functions\" />\r\n      <recent name=\"C:\\Users\\Андрей\\PycharmProjects\\NeVestaGRS\\core\\model\\entity\" />\r\n      <recent name=\"C:\\Users\\Андрей\\PycharmProjects\\NeVestaGRS\\core\\view\" />\r\n      <recent name=\"C:\\Users\\Андрей\\PycharmProjects\\NeVestaGRS\\core\\model\" />\r\n      <recent name=\"D:\\PetProjects\\NeVestaGRS\\core\\gui\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Python.main\">\r\n    <configuration name=\"Controller\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NeVestaGRS\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core/controller\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Андрей\\PycharmProjects\\NeVestaGRS\\core\\controller\\Controller.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"PhysicFunctions\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NeVestaGRS\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core/model/functions\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/core/model/functions/PhysicFunctions.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"UtilFunctions\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NeVestaGRS\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core/model/functions\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/core/model/functions/UtilFunctions.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"grs_main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NeVestaGRS\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/core/grs_main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"NeVestaGRS\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/core\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/core/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Python.PhysicFunctions\" />\r\n      <item itemvalue=\"Python.UtilFunctions\" />\r\n      <item itemvalue=\"Python.PipeVelocityController\" />\r\n      <item itemvalue=\"Python.grs_main\" />\r\n      <item itemvalue=\"Python.main\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.main\" />\r\n        <item itemvalue=\"Python.PipeVelocityController\" />\r\n        <item itemvalue=\"Python.UtilFunctions\" />\r\n        <item itemvalue=\"Python.PhysicFunctions\" />\r\n        <item itemvalue=\"Python.grs_main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-ce3d9afa04ac-ba05f1cad1b1-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.20224.347\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f607f56e-4ff3-4da4-83f7-2cd0ed8438d4\" name=\"Changes\" comment=\"\" />\r\n      <created>1723550601327</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1723550601327</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1723922418912</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1723922418912</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ac3036f97d966ff3a1bb8a72571c75e762b9a3a3)
+++ b/.idea/workspace.xml	(date 1724167335226)
@@ -4,22 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="f607f56e-4ff3-4da4-83f7-2cd0ed8438d4" name="Changes" comment="Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source">
-      <change afterPath="$PROJECT_DIR$/core/controller/ControllerInterface.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/core/model/functions/function_props.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/core/view/window_props.py" afterDir="false" />
+    <list default="true" id="f607f56e-4ff3-4da4-83f7-2cd0ed8438d4" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/controller/Controller.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/controller/Controller.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/controller/MainMenuController.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/controller/PipeVelocityController.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/main.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/model/entity/Gas.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/model/entity/Gas.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/model/functions/PhysicFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/model/functions/PhysicFunctions.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/model/functions/UtilFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/model/functions/UtilFunctions.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/view/GRSWindow.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/view/GRSWindow.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/core/view/Window.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/view/Window.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/guidata/texts.py" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/test/functions/PhysicFunctions.py" beforeDir="false" afterPath="$PROJECT_DIR$/test/functions/PhysicFunctions.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/grs_main.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/grs_main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/core/grs_stat.py" beforeDir="false" afterPath="$PROJECT_DIR$/core/grs_stat.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -36,7 +24,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="master" />
+        <entry key="$PROJECT_DIR$" value="dev" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -47,23 +35,10 @@
     &quot;assignee&quot;: &quot;AndrewDanie&quot;
   }
 }</component>
-  <component name="GithubDefaultAccount">
-    <option name="defaultAccountId" value="4b0fb413-7d43-4307-a727-dd18bd93e6c4" />
-  </component>
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/AndrewDanie/NeVestaGRS.git&quot;,
-    &quot;accountId&quot;: &quot;4b0fb413-7d43-4307-a727-dd18bd93e6c4&quot;
-  },
-  &quot;recentNewPullRequestHead&quot;: {
-    &quot;server&quot;: {
-      &quot;useHttp&quot;: false,
-      &quot;host&quot;: &quot;github.com&quot;,
-      &quot;port&quot;: null,
-      &quot;suffix&quot;: null
-    },
-    &quot;owner&quot;: &quot;AndrewDanie&quot;,
-    &quot;repository&quot;: &quot;NeVestaGRS&quot;
+    &quot;accountId&quot;: &quot;93b201df-9116-47dd-9b3e-946dae08ae50&quot;
   }
 }</component>
   <component name="ProjectColorInfo">{
@@ -75,78 +50,23 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.PhysicFunctions (1).executor": "Run",
-    "Python.PhysicFunctions.executor": "Run",
-    "Python.PipeVelocityController.executor": "Run",
-    "Python.UtilFunctions.executor": "Run",
-    "Python.ValveSpeedController.executor": "Run",
-    "Python.Window.executor": "Run",
-    "Python.grs_interface.executor": "Run",
-    "Python.grs_main.executor": "Run",
-    "Python.main.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "refactor",
-    "last_opened_file_path": "C:/Users/Идель/PycharmProjects/NeVestaGRS",
-    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.Window.executor&quot;: &quot;Run&quot;,
+    &quot;Python.grs_interface.executor&quot;: &quot;Run&quot;,
+    &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;refactor&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\Users\Андрей\PycharmProjects\NeVestaGRS\core\model\functions" />
-      <recent name="C:\Users\Андрей\PycharmProjects\NeVestaGRS\core\model\entity" />
-      <recent name="C:\Users\Андрей\PycharmProjects\NeVestaGRS\core\view" />
-      <recent name="C:\Users\Андрей\PycharmProjects\NeVestaGRS\core\model" />
       <recent name="D:\PetProjects\NeVestaGRS\core\gui" />
+      <recent name="D:\PetProjects\NeVestaGRS\core" />
     </key>
   </component>
   <component name="RunManager" selected="Python.main">
-    <configuration name="Controller" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-      <module name="NeVestaGRS" />
-      <option name="ENV_FILES" value="" />
-      <option name="INTERPRETER_OPTIONS" value="" />
-      <option name="PARENT_ENVS" value="true" />
-      <envs>
-        <env name="PYTHONUNBUFFERED" value="1" />
-      </envs>
-      <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/core/controller" />
-      <option name="IS_MODULE_SDK" value="true" />
-      <option name="ADD_CONTENT_ROOTS" value="true" />
-      <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="C:\Users\Андрей\PycharmProjects\NeVestaGRS\core\controller\Controller.py" />
-      <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="false" />
-      <option name="EMULATE_TERMINAL" value="false" />
-      <option name="MODULE_MODE" value="false" />
-      <option name="REDIRECT_INPUT" value="false" />
-      <option name="INPUT_FILE" value="" />
-      <method v="2" />
-    </configuration>
-    <configuration name="PhysicFunctions" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
-      <module name="NeVestaGRS" />
-      <option name="ENV_FILES" value="" />
-      <option name="INTERPRETER_OPTIONS" value="" />
-      <option name="PARENT_ENVS" value="true" />
-      <envs>
-        <env name="PYTHONUNBUFFERED" value="1" />
-      </envs>
-      <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/core/model/functions" />
-      <option name="IS_MODULE_SDK" value="true" />
-      <option name="ADD_CONTENT_ROOTS" value="true" />
-      <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/core/model/functions/PhysicFunctions.py" />
-      <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="false" />
-      <option name="EMULATE_TERMINAL" value="false" />
-      <option name="MODULE_MODE" value="false" />
-      <option name="REDIRECT_INPUT" value="false" />
-      <option name="INPUT_FILE" value="" />
-      <method v="2" />
-    </configuration>
-    <configuration name="UtilFunctions" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="Window" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="NeVestaGRS" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -155,11 +75,11 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/core/model/functions" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/core/gui" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/core/model/functions/UtilFunctions.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/core/gui/Window.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -168,7 +88,7 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="grs_main" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+    <configuration name="grs_interface" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
       <module name="NeVestaGRS" />
       <option name="ENV_FILES" value="" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -177,11 +97,11 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/core" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/core/gui" />
       <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/core/grs_main.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/core/gui/grs_interface.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -212,20 +132,11 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <list>
-      <item itemvalue="Python.PhysicFunctions" />
-      <item itemvalue="Python.UtilFunctions" />
-      <item itemvalue="Python.PipeVelocityController" />
-      <item itemvalue="Python.grs_main" />
-      <item itemvalue="Python.main" />
-    </list>
     <recent_temporary>
       <list>
         <item itemvalue="Python.main" />
-        <item itemvalue="Python.PipeVelocityController" />
-        <item itemvalue="Python.UtilFunctions" />
-        <item itemvalue="Python.PhysicFunctions" />
-        <item itemvalue="Python.grs_main" />
+        <item itemvalue="Python.Window" />
+        <item itemvalue="Python.grs_interface" />
       </list>
     </recent_temporary>
   </component>
@@ -245,15 +156,6 @@
       <option name="presentableId" value="Default" />
       <updated>1723550601327</updated>
     </task>
-    <task id="LOCAL-00001" summary="Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source">
-      <option name="closed" value="true" />
-      <created>1723922418912</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1723922418912</updated>
-    </task>
-    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -267,8 +169,4 @@
       </map>
     </option>
   </component>
-  <component name="VcsManagerConfiguration">
-    <MESSAGE value="Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source" />
-    <option name="LAST_COMMIT_MESSAGE" value="Added controller package&#10;Added test package&#10;Added controllers for pipe velocity calculations&#10;Added constants.py for constant value source" />
-  </component>
 </project>
\ No newline at end of file
