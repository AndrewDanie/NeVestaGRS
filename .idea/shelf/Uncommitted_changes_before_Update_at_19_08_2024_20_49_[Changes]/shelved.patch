Index: core/gui/Window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom tkinter import ttk\r\nfrom tkinter.scrolledtext import ScrolledText\r\nimport guidata.texts as TEXT\r\nfrom core.gui.InputEntity import InputEntity\r\n\r\n\r\nclass Window(InputEntity):\r\n\r\n    def __init__(self, title, size='800x600'):\r\n        super().__init__()\r\n        self.root = Tk()\r\n        self.title = self.root.title(title)\r\n        self.geometry = self.root.geometry(size)\r\n\r\n    def get_type(self):\r\n        return 'GUI'\r\n\r\n    def get_input_value(self, input_name):\r\n        return self._inputs[input_name].get()\r\n\r\n    def mainloop(self):\r\n        self.root.mainloop()\r\n\r\n    def clear_window(self):\r\n        for slave in self.root.winfo_children():\r\n            slave.destroy()\r\n\r\n    def make_default_frames(self, label):\r\n        Label(self.root, text=label, font=('Arial Bold', 18)).pack(pady=15)\r\n        Button(self.root, text='Главное меню', font=(\"Arial Bold\", 10), command=self.load_window_menu)\\\r\n            .place(anchor=NE, relx=1, x=-15, y=15)\r\n\r\n        left_frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=[8, 10])\r\n        left_frame.place(relheight=1, relwidth=0.7, rely=0.1)\r\n\r\n        right_frame = ttk.Frame(borderwidth=1, relief=SOLID, padding=[8, 10])\r\n        right_frame.place(relheight=1, relwidth=0.3, rely=0.1, relx=0.7)\r\n\r\n        return left_frame, right_frame\r\n\r\n    def add_output_block(self, master_widget, pack_side=TOP):\r\n        ScrolledText(master_widget, height=20, state='disabled').pack(fill=X, side=pack_side)\r\n        Button(master_widget, text='Очистить окно вывода', font=(\"Arial Bold\", 10)).pack(pady=10, side=pack_side)\r\n\r\n    def add_input_block(self, master_widget, input_labels, pack_side=TOP):\r\n        for label in input_labels:\r\n            frame = ttk.Frame(master_widget, borderwidth=1, padding=[4, 5])\r\n            frame.pack(fill=X, side=pack_side)\r\n            Label(frame, text=label, font=('Arial Bold', 10)).pack(side=LEFT)\r\n            Entry(frame, width=10, justify='center').pack(side=LEFT)\r\n\r\n    def add_buttons_block(self, master_widget, button_labels, pack_side=TOP):\r\n        for label in button_labels:\r\n            frame = ttk.Frame(master_widget, borderwidth=1, padding=[4, 5])\r\n            frame.pack(fill=X, side=pack_side)\r\n            Button(frame, text=label, font=(\"Arial Bold\", 10)).pack(side=LEFT)\r\n\r\n    def add_combobox(self, master_widget, label, values, pack_side=TOP):\r\n        frame = ttk.Frame(master_widget, borderwidth=1, padding=[8, 10])\r\n        frame.pack(fill=X, side=pack_side)\r\n        Label(frame, text=label, font=('Arial Bold', 10)).pack(side=LEFT)\r\n        combo = ttk.Combobox(frame)\r\n        combo['values'] = values\r\n        combo.current(0)\r\n        combo.pack(side=LEFT)\r\n\r\n    def add_empty_space(self, master_widget, amount, pack_side=TOP):\r\n        Label(master_widget, text=\"\", font=('Arial Bold', 10)).pack(pady=amount, side=pack_side)\r\n\r\n    def load_window_velocity_calc(self):\r\n        # Расчет скорости в трубопроводах\r\n\r\n        self.clear_window()\r\n        input_labels = [\r\n            'Давление, МПа',\r\n            'Температура, °С',\r\n            'Расход',\r\n            'Диаметр Ду, мм'\r\n        ]\r\n        button_labels = [\r\n            'Рассчитать всю ГРС',\r\n            'Подбор диаметра',\r\n            'Плотность газа',\r\n            'Скорость газа',\r\n        ]\r\n        left_frame, right_frame = self.make_default_frames('Расчет скорости в трубопроводах')\r\n\r\n        self.add_output_block(left_frame)\r\n\r\n        self.add_combobox(right_frame, 'Доступные ГРС', [1, 2, 3])\r\n        self.add_input_block(right_frame, input_labels)\r\n        self.add_empty_space(right_frame, 30, pack_side=BOTTOM)\r\n        self.add_buttons_block(right_frame, button_labels, pack_side=BOTTOM)\r\n\r\n    def load_window_odorant_calc(self):\r\n        # Ёмкость одоранта\r\n\r\n        self.clear_window()\r\n        input_labels = [\r\n            'Вместимость ёмкости',\r\n            'Расход газа в ст. м3',\r\n        ]\r\n        button_labels = [\r\n            'Требуемый объём',\r\n            'Запас',\r\n        ]\r\n        left_frame, right_frame = self.make_default_frames('Ёмкость одоранта')\r\n\r\n        self.add_output_block(left_frame)\r\n\r\n        self.add_input_block(right_frame, input_labels)\r\n        self.add_empty_space(right_frame, 30, pack_side=BOTTOM)\r\n        self.add_buttons_block(right_frame, button_labels, pack_side=BOTTOM)\r\n\r\n    def load_window_valve_calc(self):\r\n        # Расчёт пропускной способности клапанов\r\n        self.clear_window()\r\n        input_labels = [\r\n            'Давление до клапана, МПа',\r\n            'Давление после клапана, МПа',\r\n            'Температура, °С',\r\n            'Kv, м3/ч',\r\n        ]\r\n        button_labels = [\r\n            'Полный расчёт',\r\n            'Расчёт Kv',\r\n            'Выполнить расчёт',\r\n        ]\r\n        left_frame, right_frame = self.make_default_frames('Расчёт пропускной способности клапанов')\r\n\r\n        self.add_output_block(left_frame)\r\n\r\n        self.add_combobox(right_frame, 'Доступные ГРС', [1, 2, 3])\r\n        self.add_input_block(right_frame, input_labels)\r\n        self.add_empty_space(right_frame, 30, pack_side=BOTTOM)\r\n        self.add_buttons_block(right_frame, button_labels, pack_side=BOTTOM)\r\n\r\n    def load_window_gas_heat_calc(self):\r\n        # Теплотехнический расчёт, подбор подогревателя газа\r\n        self.clear_window()\r\n        input_labels = [\r\n            'Расход газа, ст. м3/ч',\r\n            'Давление на входе ГРС, МПа',\r\n            'Давление на выходе ГРС, МПа',\r\n            'Температура газа на входе ГРС, °С',\r\n            'Минимальная тем-ра на выходе, °С',\r\n        ]\r\n        button_labels = [\r\n            'Выполнить расчёт',\r\n        ]\r\n        left_frame, right_frame = self.make_default_frames('Теплотехнический расчёт, подбор подогревателя газа')\r\n\r\n        self.add_output_block(left_frame)\r\n\r\n        self.add_combobox(right_frame, 'Доступные ГРС', [1, 2, 3])\r\n        self.add_input_block(right_frame, input_labels)\r\n        self.add_empty_space(right_frame, 30, pack_side=BOTTOM)\r\n        self.add_buttons_block(right_frame, button_labels, pack_side=BOTTOM)\r\n\r\n    def load_window_ppk_calc(self):\r\n        # Расчёт предохранительных клапанов ГРС\r\n        self.clear_window()\r\n        input_labels = [\r\n            'Давление до клапана, МПа',\r\n            'Температура, °С',\r\n            'Альфа',\r\n            'Расход газа, ст. м3/ч'\r\n        ]\r\n        button_labels = [\r\n            'Выполнить расчёт',\r\n            'Расчет седла',\r\n        ]\r\n        left_frame, right_frame = self.make_default_frames('Расчёт предохранительных клапанов ГРС')\r\n\r\n        self.add_output_block(left_frame)\r\n\r\n        self.add_combobox(right_frame, 'Доступные ГРС', [1, 2, 3])\r\n        self.add_input_block(right_frame, input_labels)\r\n        self.add_empty_space(right_frame, 30, pack_side=BOTTOM)\r\n        self.add_buttons_block(right_frame, button_labels, pack_side=BOTTOM)\r\n\r\n    def load_window_tvps_calc(self):\r\n        # Расчёт ТВПС\r\n        self.clear_window()\r\n        input_labels = [\r\n            'Минимальное давление',\r\n            'Максимальное давление',\r\n            'Шаг по давлению',\r\n            'Минимальная температура',\r\n            'Максимальная температура',\r\n            'Число точек по температуре',\r\n            'Масштаб подписей данных'\r\n        ]\r\n        button_labels = [\r\n            'Таблица',\r\n            'Расчёт',\r\n            'Вставить секцию ТВПС',\r\n            'График ТВПС',\r\n            'Показать ТВПС'\r\n        ]\r\n        left_frame, right_frame = self.make_default_frames('Расчёт ТВПС')\r\n\r\n        self.add_output_block(left_frame)\r\n\r\n        self.add_combobox(right_frame, 'Доступные ГРС', [1, 2, 3])\r\n        self.add_input_block(right_frame, input_labels)\r\n        self.add_empty_space(right_frame, 30, pack_side=BOTTOM)\r\n        self.add_buttons_block(right_frame, button_labels, pack_side=BOTTOM)\r\n\r\n    def load_window_menu(self):\r\n        # Главное меню\r\n        self.clear_window()\r\n        button_labels = {\r\n            'Расчет скорости в трубопроводах': self.load_window_velocity_calc,\r\n            'Ёмкость одоранта': self.load_window_odorant_calc,\r\n            'Пропускная способность клапанов': self.load_window_valve_calc,\r\n            'Расчёт подогревателя газа': self.load_window_gas_heat_calc,\r\n            'Расчёт ППК': self.load_window_ppk_calc,\r\n            'Толщина стенок трубопроводов': None,\r\n            'Схема': None,\r\n            'Статистика': None,\r\n            'База данных ГРС': None,\r\n            'Расчёт ТВПС': self.load_window_tvps_calc,\r\n        }\r\n        Label(self.root, text='НеВеста-ГРС', font=('Arial Bold', 18)).place(relx=0.5, anchor=N, y=30)\r\n\r\n        central_frame = ttk.Frame(self.root, borderwidth=1, padding=[4, 5])\r\n        central_frame.pack(expand=True, anchor=CENTER)\r\n        l = len(button_labels)\r\n        i = 0\r\n        for label in button_labels:\r\n            frame = ttk.Frame(central_frame, borderwidth=1, padding=[4, 5])\r\n            frame.grid(row=i//2, column=i%2)\r\n            Button(frame, text=label, font=(\"Arial Bold\", 10), width=30, command=button_labels[label]).pack()\r\n            i += 1
===================================================================
diff --git a/core/gui/Window.py b/core/gui/Window.py
--- a/core/gui/Window.py	(revision 2bcbb3b2b46c6aab51837a4154146bd008f4807e)
+++ b/core/gui/Window.py	(date 1723734193044)
@@ -1,7 +1,6 @@
 from tkinter import *
 from tkinter import ttk
 from tkinter.scrolledtext import ScrolledText
-import guidata.texts as TEXT
 from core.gui.InputEntity import InputEntity
 
 
@@ -75,7 +74,7 @@
         input_labels = [
             'Давление, МПа',
             'Температура, °С',
-            'Расход',
+            'Расход, м3',
             'Диаметр Ду, мм'
         ]
         button_labels = [
Index: core/functions/PhysicFunctions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n    Физические функции для обсчетов\r\n\"\"\"\r\n\r\nimport math\r\n\r\nfrom core.entity.Gas import Gas\r\nfrom core.entity.Pipeline import Pipeline\r\nfrom core.entity.Vessel import Vessel\r\n\r\n\r\ndef run_calc(function, **kwargs):\r\n    \"\"\"Запуск любой функции с соответствующими ей аргументами\"\"\"\r\n    if None in kwargs.values():\r\n        raise Exception('Не хватает аргументов!')\r\n    else:\r\n        return function(**kwargs)\r\n\r\n\r\ndef calc_pipe_velocity(composition, temperature, pressure, internal_diameter, rate):\r\n    \"\"\"Рассчитывает скорость газа в трубопроводе\"\"\"\r\n\r\n    pipe = Pipeline(internal_diameter, 0, 0)\r\n    gas = Gas(composition, temperature, pressure, rate)\r\n    velocity = gas.actual_rate / pipe.area / 3600\r\n    capacity = round(25 * rate / velocity)\r\n\r\n    return capacity, velocity\r\n\r\n\r\ndef calc_gas_density(composition, temperature, pressure, rate):\r\n    \"\"\"Рассчитывает плотность газа при рабочих, нормальных, стандартных условиях, актуальный расход газа\"\"\"\r\n\r\n    gas = Gas(composition, temperature, pressure, rate)\r\n\r\n    return (\r\n        round(gas.actual_density, 2),\r\n        round(gas.standard_density, 4),\r\n        round(gas.actual_rate, 2),\r\n        round(gas.molecular_mass, 2),\r\n    )\r\n\r\n\r\ndef calc_pipe_diameter(composition, temperature, pressure, rate):\r\n    \"\"\"Рассчитывает требуемый диаметр трубопровода, чтобы скорость была в порядке\"\"\"\r\n    velosity_limit = 25\r\n\r\n    gas = Gas(composition, temperature, pressure, rate)\r\n    actual_flow = gas.standard_density / gas.actual_density * rate\r\n    internal_diameter = (actual_flow * 4 / 3600 / velosity_limit / math.pi) ** 0.5 * 1000\r\n\r\n    return round(internal_diameter, 2)\r\n\r\n\r\n\"\"\"Плохая функция\"\"\"\r\ndef calc_odorant_reserve(volume, rate):\r\n    \"\"\"Рассчитывает запас одоранта\"\"\"\r\n\r\n    odorant_vessel = Vessel(0, 0, volume)\r\n    return odorant_vessel\r\n\r\n\r\ndef calc_request_odorant_reserve(rate):\r\n    \"\"\"Рассчитывает необходимый запас одоранта\"\"\"\r\n\r\n    request_volume = rate / 1000 * 0.016 * 60 * 24 / 830\r\n    return round(request_volume, 2)\r\n
===================================================================
diff --git a/core/functions/PhysicFunctions.py b/core/functions/PhysicFunctions.py
--- a/core/functions/PhysicFunctions.py	(revision 2bcbb3b2b46c6aab51837a4154146bd008f4807e)
+++ b/core/functions/PhysicFunctions.py	(date 1723732987696)
@@ -53,7 +53,7 @@
 
 
 """Плохая функция"""
-def calc_odorant_reserve(volume, rate):
+def calc_odorant_reserve(volume):
     """Рассчитывает запас одоранта"""
 
     odorant_vessel = Vessel(0, 0, volume)
Index: core/functions/UtilFunctions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\n    Различные вспомогательные фукнции\r\n\"\"\"\r\n\r\ndef get_validated_int(string_input):\r\n    \"\"\"Валидирует строку и возвращает целочисленное значение\"\"\"\r\n    try:\r\n        return int(string_input)\r\n    except:\r\n        raise Exception('Неверный формат целого числа!')\r\n\r\n\r\ndef get_validated_float(string_input : str):\r\n    \"\"\"Валидирует строку и возвращает число с плавающей точкой\"\"\"\r\n    try:\r\n        string_input.replace(',', '.')\r\n        return int(string_input)\r\n    except:\r\n        raise Exception('Неверный формат десятичной дроби!')
===================================================================
diff --git a/core/functions/UtilFunctions.py b/core/functions/UtilFunctions.py
--- a/core/functions/UtilFunctions.py	(revision 2bcbb3b2b46c6aab51837a4154146bd008f4807e)
+++ b/core/functions/UtilFunctions.py	(date 1723732987717)
@@ -1,5 +1,5 @@
 """
-    Различные вспомогательные фукнции
+а    Различные вспомогательные функции
 """
 
 def get_validated_int(string_input):
@@ -14,6 +14,6 @@
     """Валидирует строку и возвращает число с плавающей точкой"""
     try:
         string_input.replace(',', '.')
-        return int(string_input)
+        return float(string_input)
     except:
-        raise Exception('Неверный формат десятичной дроби!')
\ No newline at end of file
+        raise Exception('Неверный формат десятичной дроби!')
